// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module StoreUnit(
  input         clock,
  input         reset,
  input         io_redirect_valid,
  input         io_redirect_bits_robIdx_flag,
  input  [7:0]  io_redirect_bits_robIdx_value,
  input         io_redirect_bits_level,
  input         io_csrCtrl_hd_misalign_st_enable,
  output        io_stin_ready,
  input         io_stin_valid,
  input         io_stin_bits_uop_ftqPtr_flag,
  input  [5:0]  io_stin_bits_uop_ftqPtr_value,
  input  [3:0]  io_stin_bits_uop_ftqOffset,
  input  [34:0] io_stin_bits_uop_fuType,
  input  [8:0]  io_stin_bits_uop_fuOpType,
  input         io_stin_bits_uop_rfWen,
  input  [31:0] io_stin_bits_uop_imm,
  input  [7:0]  io_stin_bits_uop_pdest,
  input         io_stin_bits_uop_robIdx_flag,
  input  [7:0]  io_stin_bits_uop_robIdx_value,
  input         io_stin_bits_uop_debugInfo_eliminatedMove,
  input  [63:0] io_stin_bits_uop_debugInfo_renameTime,
  input  [63:0] io_stin_bits_uop_debugInfo_dispatchTime,
  input  [63:0] io_stin_bits_uop_debugInfo_enqRsTime,
  input  [63:0] io_stin_bits_uop_debugInfo_selectTime,
  input  [63:0] io_stin_bits_uop_debugInfo_issueTime,
  input  [63:0] io_stin_bits_uop_debugInfo_writebackTime,
  input  [63:0] io_stin_bits_uop_debugInfo_runahead_checkpoint_id,
  input  [63:0] io_stin_bits_uop_debugInfo_tlbFirstReqTime,
  input  [63:0] io_stin_bits_uop_debugInfo_tlbRespTime,
  input         io_stin_bits_uop_lqIdx_flag,
  input  [6:0]  io_stin_bits_uop_lqIdx_value,
  input         io_stin_bits_uop_sqIdx_flag,
  input  [5:0]  io_stin_bits_uop_sqIdx_value,
  input  [63:0] io_stin_bits_src_0,
  input         io_stin_bits_isFirstIssue,
  output        io_issue_valid,
  output        io_issue_bits_uop_robIdx_flag,
  output [7:0]  io_issue_bits_uop_robIdx_value,
  output        io_misalign_stin_ready,
  input         io_misalign_stin_valid,
  input         io_misalign_stin_bits_uop_exceptionVec_0,
  input         io_misalign_stin_bits_uop_exceptionVec_1,
  input         io_misalign_stin_bits_uop_exceptionVec_2,
  input         io_misalign_stin_bits_uop_exceptionVec_4,
  input         io_misalign_stin_bits_uop_exceptionVec_5,
  input         io_misalign_stin_bits_uop_exceptionVec_8,
  input         io_misalign_stin_bits_uop_exceptionVec_9,
  input         io_misalign_stin_bits_uop_exceptionVec_10,
  input         io_misalign_stin_bits_uop_exceptionVec_11,
  input         io_misalign_stin_bits_uop_exceptionVec_12,
  input         io_misalign_stin_bits_uop_exceptionVec_13,
  input         io_misalign_stin_bits_uop_exceptionVec_14,
  input         io_misalign_stin_bits_uop_exceptionVec_16,
  input         io_misalign_stin_bits_uop_exceptionVec_17,
  input         io_misalign_stin_bits_uop_exceptionVec_18,
  input         io_misalign_stin_bits_uop_exceptionVec_19,
  input         io_misalign_stin_bits_uop_exceptionVec_20,
  input         io_misalign_stin_bits_uop_exceptionVec_21,
  input         io_misalign_stin_bits_uop_exceptionVec_22,
  input         io_misalign_stin_bits_uop_ftqPtr_flag,
  input  [5:0]  io_misalign_stin_bits_uop_ftqPtr_value,
  input  [3:0]  io_misalign_stin_bits_uop_ftqOffset,
  input  [34:0] io_misalign_stin_bits_uop_fuType,
  input  [8:0]  io_misalign_stin_bits_uop_fuOpType,
  input         io_misalign_stin_bits_uop_rfWen,
  input  [7:0]  io_misalign_stin_bits_uop_vpu_vstart,
  input  [2:0]  io_misalign_stin_bits_uop_vpu_nf,
  input  [1:0]  io_misalign_stin_bits_uop_vpu_veew,
  input  [6:0]  io_misalign_stin_bits_uop_uopIdx,
  input  [7:0]  io_misalign_stin_bits_uop_pdest,
  input         io_misalign_stin_bits_uop_robIdx_flag,
  input  [7:0]  io_misalign_stin_bits_uop_robIdx_value,
  input         io_misalign_stin_bits_uop_debugInfo_eliminatedMove,
  input  [63:0] io_misalign_stin_bits_uop_debugInfo_renameTime,
  input  [63:0] io_misalign_stin_bits_uop_debugInfo_dispatchTime,
  input  [63:0] io_misalign_stin_bits_uop_debugInfo_enqRsTime,
  input  [63:0] io_misalign_stin_bits_uop_debugInfo_selectTime,
  input  [63:0] io_misalign_stin_bits_uop_debugInfo_issueTime,
  input  [63:0] io_misalign_stin_bits_uop_debugInfo_writebackTime,
  input  [63:0] io_misalign_stin_bits_uop_debugInfo_runahead_checkpoint_id,
  input  [63:0] io_misalign_stin_bits_uop_debugInfo_tlbFirstReqTime,
  input  [63:0] io_misalign_stin_bits_uop_debugInfo_tlbRespTime,
  input         io_misalign_stin_bits_uop_lqIdx_flag,
  input  [6:0]  io_misalign_stin_bits_uop_lqIdx_value,
  input         io_misalign_stin_bits_uop_sqIdx_flag,
  input  [5:0]  io_misalign_stin_bits_uop_sqIdx_value,
  input  [49:0] io_misalign_stin_bits_vaddr,
  input  [15:0] io_misalign_stin_bits_mask,
  input         io_misalign_stin_bits_isvec,
  input         io_misalign_stin_bits_is128bit,
  input         io_misalign_stin_bits_isFinalSplit,
  output        io_misalign_stout_valid,
  output        io_misalign_stout_bits_uop_exceptionVec_3,
  output        io_misalign_stout_bits_uop_exceptionVec_6,
  output        io_misalign_stout_bits_uop_exceptionVec_7,
  output        io_misalign_stout_bits_uop_exceptionVec_15,
  output        io_misalign_stout_bits_uop_exceptionVec_23,
  output [3:0]  io_misalign_stout_bits_uop_trigger,
  output [47:0] io_misalign_stout_bits_paddr,
  output        io_misalign_stout_bits_mmio,
  output        io_misalign_stout_bits_vecActive,
  output        io_misalign_stout_bits_need_rep,
  output        io_tlb_req_valid,
  output [49:0] io_tlb_req_bits_vaddr,
  output [63:0] io_tlb_req_bits_fullva,
  output        io_tlb_req_bits_checkfullva,
  output        io_tlb_req_bits_hyperinst,
  output [6:0]  io_tlb_req_bits_memidx_idx,
  output        io_tlb_req_bits_debug_robIdx_flag,
  output [7:0]  io_tlb_req_bits_debug_robIdx_value,
  output        io_tlb_req_bits_debug_isFirstIssue,
  input         io_tlb_resp_valid,
  input  [47:0] io_tlb_resp_bits_paddr_0,
  input  [63:0] io_tlb_resp_bits_gpaddr_0,
  input  [63:0] io_tlb_resp_bits_fullva,
  input  [1:0]  io_tlb_resp_bits_pbmt_0,
  input         io_tlb_resp_bits_miss,
  input         io_tlb_resp_bits_isForVSnonLeafPTE,
  input         io_tlb_resp_bits_excp_0_vaNeedExt,
  input         io_tlb_resp_bits_excp_0_isHyper,
  input         io_tlb_resp_bits_excp_0_gpf_st,
  input         io_tlb_resp_bits_excp_0_pf_st,
  input         io_tlb_resp_bits_excp_0_af_st,
  input         io_tlb_resp_bits_ptwBack,
  input  [6:0]  io_tlb_resp_bits_memidx_idx,
  output        io_dcache_req_valid,
  input         io_pmp_st,
  input         io_pmp_mmio,
  input         io_pmp_atomic,
  output        io_lsq_valid,
  output        io_lsq_bits_uop_exceptionVec_0,
  output        io_lsq_bits_uop_exceptionVec_1,
  output        io_lsq_bits_uop_exceptionVec_2,
  output        io_lsq_bits_uop_exceptionVec_3,
  output        io_lsq_bits_uop_exceptionVec_4,
  output        io_lsq_bits_uop_exceptionVec_5,
  output        io_lsq_bits_uop_exceptionVec_6,
  output        io_lsq_bits_uop_exceptionVec_7,
  output        io_lsq_bits_uop_exceptionVec_8,
  output        io_lsq_bits_uop_exceptionVec_9,
  output        io_lsq_bits_uop_exceptionVec_10,
  output        io_lsq_bits_uop_exceptionVec_11,
  output        io_lsq_bits_uop_exceptionVec_12,
  output        io_lsq_bits_uop_exceptionVec_13,
  output        io_lsq_bits_uop_exceptionVec_14,
  output        io_lsq_bits_uop_exceptionVec_15,
  output        io_lsq_bits_uop_exceptionVec_16,
  output        io_lsq_bits_uop_exceptionVec_17,
  output        io_lsq_bits_uop_exceptionVec_18,
  output        io_lsq_bits_uop_exceptionVec_19,
  output        io_lsq_bits_uop_exceptionVec_20,
  output        io_lsq_bits_uop_exceptionVec_21,
  output        io_lsq_bits_uop_exceptionVec_22,
  output        io_lsq_bits_uop_exceptionVec_23,
  output [3:0]  io_lsq_bits_uop_trigger,
  output        io_lsq_bits_uop_ftqPtr_flag,
  output [5:0]  io_lsq_bits_uop_ftqPtr_value,
  output [3:0]  io_lsq_bits_uop_ftqOffset,
  output [34:0] io_lsq_bits_uop_fuType,
  output [8:0]  io_lsq_bits_uop_fuOpType,
  output        io_lsq_bits_uop_rfWen,
  output [2:0]  io_lsq_bits_uop_vpu_nf,
  output [1:0]  io_lsq_bits_uop_vpu_veew,
  output [6:0]  io_lsq_bits_uop_uopIdx,
  output [7:0]  io_lsq_bits_uop_pdest,
  output        io_lsq_bits_uop_robIdx_flag,
  output [7:0]  io_lsq_bits_uop_robIdx_value,
  output        io_lsq_bits_uop_debugInfo_eliminatedMove,
  output [63:0] io_lsq_bits_uop_debugInfo_renameTime,
  output [63:0] io_lsq_bits_uop_debugInfo_dispatchTime,
  output [63:0] io_lsq_bits_uop_debugInfo_enqRsTime,
  output [63:0] io_lsq_bits_uop_debugInfo_selectTime,
  output [63:0] io_lsq_bits_uop_debugInfo_issueTime,
  output [63:0] io_lsq_bits_uop_debugInfo_writebackTime,
  output [63:0] io_lsq_bits_uop_debugInfo_runahead_checkpoint_id,
  output [63:0] io_lsq_bits_uop_debugInfo_tlbFirstReqTime,
  output [63:0] io_lsq_bits_uop_debugInfo_tlbRespTime,
  output        io_lsq_bits_uop_sqIdx_flag,
  output [5:0]  io_lsq_bits_uop_sqIdx_value,
  output [49:0] io_lsq_bits_vaddr,
  output [63:0] io_lsq_bits_fullva,
  output        io_lsq_bits_vaNeedExt,
  output [47:0] io_lsq_bits_paddr,
  output [63:0] io_lsq_bits_gpaddr,
  output [15:0] io_lsq_bits_mask,
  output        io_lsq_bits_wlineflag,
  output        io_lsq_bits_miss,
  output        io_lsq_bits_nc,
  output        io_lsq_bits_isHyper,
  output        io_lsq_bits_isForVSnonLeafPTE,
  output        io_lsq_bits_isvec,
  output        io_lsq_bits_isFrmMisAlignBuf,
  output        io_lsq_bits_isMisalign,
  output        io_lsq_bits_misalignWith16Byte,
  output        io_lsq_bits_updateAddrValid,
  output        io_lsq_replenish_uop_exceptionVec_3,
  output        io_lsq_replenish_uop_exceptionVec_6,
  output        io_lsq_replenish_uop_exceptionVec_15,
  output        io_lsq_replenish_uop_exceptionVec_23,
  output [6:0]  io_lsq_replenish_uop_uopIdx,
  output        io_lsq_replenish_uop_robIdx_flag,
  output [7:0]  io_lsq_replenish_uop_robIdx_value,
  output [63:0] io_lsq_replenish_fullva,
  output        io_lsq_replenish_vaNeedExt,
  output [63:0] io_lsq_replenish_gpaddr,
  output        io_lsq_replenish_af,
  output        io_lsq_replenish_mmio,
  output        io_lsq_replenish_memBackTypeMM,
  output        io_lsq_replenish_atomic,
  output        io_lsq_replenish_hasException,
  output        io_lsq_replenish_isHyper,
  output        io_lsq_replenish_isForVSnonLeafPTE,
  output        io_lsq_replenish_isvec,
  output        io_lsq_replenish_updateAddrValid,
  output        io_feedback_slow_valid,
  output        io_feedback_slow_bits_robIdx_flag,
  output [7:0]  io_feedback_slow_bits_robIdx_value,
  output        io_feedback_slow_bits_hit,
  output        io_feedback_slow_bits_flushState,
  output        io_feedback_slow_bits_sqIdx_flag,
  output [5:0]  io_feedback_slow_bits_sqIdx_value,
  output        io_feedback_slow_bits_lqIdx_flag,
  output [6:0]  io_feedback_slow_bits_lqIdx_value,
  input  [49:0] io_prefetch_req_bits_vaddr,
  output        io_stld_nuke_query_valid,
  output        io_stld_nuke_query_bits_robIdx_flag,
  output [7:0]  io_stld_nuke_query_bits_robIdx_value,
  output [47:0] io_stld_nuke_query_bits_paddr,
  output [15:0] io_stld_nuke_query_bits_mask,
  output        io_stld_nuke_query_bits_matchLine,
  output        io_stout_valid,
  output        io_stout_bits_uop_exceptionVec_3,
  output        io_stout_bits_uop_exceptionVec_6,
  output        io_stout_bits_uop_exceptionVec_7,
  output        io_stout_bits_uop_exceptionVec_15,
  output        io_stout_bits_uop_exceptionVec_23,
  output [3:0]  io_stout_bits_uop_trigger,
  output        io_stout_bits_uop_rfWen,
  output [7:0]  io_stout_bits_uop_pdest,
  output        io_stout_bits_uop_robIdx_flag,
  output [7:0]  io_stout_bits_uop_robIdx_value,
  output        io_stout_bits_uop_debugInfo_eliminatedMove,
  output [63:0] io_stout_bits_uop_debugInfo_renameTime,
  output [63:0] io_stout_bits_uop_debugInfo_dispatchTime,
  output [63:0] io_stout_bits_uop_debugInfo_enqRsTime,
  output [63:0] io_stout_bits_uop_debugInfo_selectTime,
  output [63:0] io_stout_bits_uop_debugInfo_issueTime,
  output [63:0] io_stout_bits_uop_debugInfo_writebackTime,
  output [63:0] io_stout_bits_uop_debugInfo_runahead_checkpoint_id,
  output [63:0] io_stout_bits_uop_debugInfo_tlbFirstReqTime,
  output [63:0] io_stout_bits_uop_debugInfo_tlbRespTime,
  output        io_stout_bits_uop_sqIdx_flag,
  output [5:0]  io_stout_bits_uop_sqIdx_value,
  output        io_stout_bits_debug_isMMIO,
  output        io_stout_bits_debug_isNC,
  output [47:0] io_stout_bits_debug_paddr,
  output [49:0] io_stout_bits_debug_vaddr,
  output        io_vecstout_valid,
  output [3:0]  io_vecstout_bits_mBIndex,
  output        io_vecstout_bits_hit,
  output [3:0]  io_vecstout_bits_trigger,
  output        io_vecstout_bits_exceptionVec_3,
  output        io_vecstout_bits_exceptionVec_6,
  output        io_vecstout_bits_exceptionVec_7,
  output        io_vecstout_bits_exceptionVec_15,
  output        io_vecstout_bits_exceptionVec_23,
  output        io_vecstout_bits_hasException,
  output [63:0] io_vecstout_bits_vaddr,
  output        io_vecstout_bits_vaNeedExt,
  output [63:0] io_vecstout_bits_gpaddr,
  output        io_vecstout_bits_isForVSnonLeafPTE,
  output [7:0]  io_vecstout_bits_vstart,
  output [7:0]  io_vecstout_bits_elemIdx,
  output [15:0] io_vecstout_bits_mask,
  output        io_st_mask_out_valid,
  output [5:0]  io_st_mask_out_bits_sqIdx_value,
  output [15:0] io_st_mask_out_bits_mask,
  output        io_vecstin_ready,
  input         io_vecstin_valid,
  input  [63:0] io_vecstin_bits_vaddr,
  input  [49:0] io_vecstin_bits_basevaddr,
  input  [15:0] io_vecstin_bits_mask,
  input  [2:0]  io_vecstin_bits_alignedType,
  input         io_vecstin_bits_vecActive,
  input         io_vecstin_bits_uop_exceptionVec_4,
  input         io_vecstin_bits_uop_exceptionVec_5,
  input         io_vecstin_bits_uop_exceptionVec_6,
  input         io_vecstin_bits_uop_exceptionVec_13,
  input         io_vecstin_bits_uop_exceptionVec_21,
  input         io_vecstin_bits_uop_ftqPtr_flag,
  input  [5:0]  io_vecstin_bits_uop_ftqPtr_value,
  input  [3:0]  io_vecstin_bits_uop_ftqOffset,
  input  [34:0] io_vecstin_bits_uop_fuType,
  input  [8:0]  io_vecstin_bits_uop_fuOpType,
  input         io_vecstin_bits_uop_rfWen,
  input  [7:0]  io_vecstin_bits_uop_vpu_vstart,
  input  [2:0]  io_vecstin_bits_uop_vpu_nf,
  input  [1:0]  io_vecstin_bits_uop_vpu_veew,
  input  [6:0]  io_vecstin_bits_uop_uopIdx,
  input  [7:0]  io_vecstin_bits_uop_pdest,
  input         io_vecstin_bits_uop_robIdx_flag,
  input  [7:0]  io_vecstin_bits_uop_robIdx_value,
  input         io_vecstin_bits_uop_debugInfo_eliminatedMove,
  input  [63:0] io_vecstin_bits_uop_debugInfo_renameTime,
  input  [63:0] io_vecstin_bits_uop_debugInfo_dispatchTime,
  input  [63:0] io_vecstin_bits_uop_debugInfo_enqRsTime,
  input  [63:0] io_vecstin_bits_uop_debugInfo_selectTime,
  input  [63:0] io_vecstin_bits_uop_debugInfo_issueTime,
  input  [63:0] io_vecstin_bits_uop_debugInfo_writebackTime,
  input  [63:0] io_vecstin_bits_uop_debugInfo_runahead_checkpoint_id,
  input  [63:0] io_vecstin_bits_uop_debugInfo_tlbFirstReqTime,
  input  [63:0] io_vecstin_bits_uop_debugInfo_tlbRespTime,
  input         io_vecstin_bits_uop_lqIdx_flag,
  input  [6:0]  io_vecstin_bits_uop_lqIdx_value,
  input         io_vecstin_bits_uop_sqIdx_flag,
  input  [5:0]  io_vecstin_bits_uop_sqIdx_value,
  input  [3:0]  io_vecstin_bits_mBIndex,
  input  [7:0]  io_vecstin_bits_elemIdx,
  input         io_misalign_buf_ready,
  output        io_misalign_buf_valid,
  output        io_misalign_buf_bits_uop_exceptionVec_0,
  output        io_misalign_buf_bits_uop_exceptionVec_1,
  output        io_misalign_buf_bits_uop_exceptionVec_2,
  output        io_misalign_buf_bits_uop_exceptionVec_4,
  output        io_misalign_buf_bits_uop_exceptionVec_5,
  output        io_misalign_buf_bits_uop_exceptionVec_8,
  output        io_misalign_buf_bits_uop_exceptionVec_9,
  output        io_misalign_buf_bits_uop_exceptionVec_10,
  output        io_misalign_buf_bits_uop_exceptionVec_11,
  output        io_misalign_buf_bits_uop_exceptionVec_12,
  output        io_misalign_buf_bits_uop_exceptionVec_13,
  output        io_misalign_buf_bits_uop_exceptionVec_14,
  output        io_misalign_buf_bits_uop_exceptionVec_16,
  output        io_misalign_buf_bits_uop_exceptionVec_17,
  output        io_misalign_buf_bits_uop_exceptionVec_18,
  output        io_misalign_buf_bits_uop_exceptionVec_19,
  output        io_misalign_buf_bits_uop_exceptionVec_20,
  output        io_misalign_buf_bits_uop_exceptionVec_21,
  output        io_misalign_buf_bits_uop_exceptionVec_22,
  output [3:0]  io_misalign_buf_bits_uop_trigger,
  output        io_misalign_buf_bits_uop_ftqPtr_flag,
  output [5:0]  io_misalign_buf_bits_uop_ftqPtr_value,
  output [3:0]  io_misalign_buf_bits_uop_ftqOffset,
  output [34:0] io_misalign_buf_bits_uop_fuType,
  output [8:0]  io_misalign_buf_bits_uop_fuOpType,
  output        io_misalign_buf_bits_uop_rfWen,
  output [7:0]  io_misalign_buf_bits_uop_vpu_vstart,
  output [2:0]  io_misalign_buf_bits_uop_vpu_nf,
  output [1:0]  io_misalign_buf_bits_uop_vpu_veew,
  output [6:0]  io_misalign_buf_bits_uop_uopIdx,
  output [7:0]  io_misalign_buf_bits_uop_pdest,
  output        io_misalign_buf_bits_uop_robIdx_flag,
  output [7:0]  io_misalign_buf_bits_uop_robIdx_value,
  output        io_misalign_buf_bits_uop_debugInfo_eliminatedMove,
  output [63:0] io_misalign_buf_bits_uop_debugInfo_renameTime,
  output [63:0] io_misalign_buf_bits_uop_debugInfo_dispatchTime,
  output [63:0] io_misalign_buf_bits_uop_debugInfo_enqRsTime,
  output [63:0] io_misalign_buf_bits_uop_debugInfo_selectTime,
  output [63:0] io_misalign_buf_bits_uop_debugInfo_issueTime,
  output [63:0] io_misalign_buf_bits_uop_debugInfo_writebackTime,
  output [63:0] io_misalign_buf_bits_uop_debugInfo_runahead_checkpoint_id,
  output [63:0] io_misalign_buf_bits_uop_debugInfo_tlbFirstReqTime,
  output [63:0] io_misalign_buf_bits_uop_debugInfo_tlbRespTime,
  output        io_misalign_buf_bits_uop_lqIdx_flag,
  output [6:0]  io_misalign_buf_bits_uop_lqIdx_value,
  output        io_misalign_buf_bits_uop_sqIdx_flag,
  output [5:0]  io_misalign_buf_bits_uop_sqIdx_value,
  output [49:0] io_misalign_buf_bits_vaddr,
  output        io_misalign_buf_bits_vaNeedExt,
  output [47:0] io_misalign_buf_bits_paddr,
  output [63:0] io_misalign_buf_bits_gpaddr,
  output [15:0] io_misalign_buf_bits_mask,
  output        io_misalign_buf_bits_hasException,
  output        io_misalign_buf_bits_isForVSnonLeafPTE,
  output        io_misalign_buf_bits_isvec,
  output [7:0]  io_misalign_buf_bits_elemIdx,
  output [2:0]  io_misalign_buf_bits_alignedType,
  output [3:0]  io_misalign_buf_bits_mbIndex,
  input  [1:0]  io_fromCsrTrigger_tdataVec_0_matchType,
  input         io_fromCsrTrigger_tdataVec_0_select,
  input         io_fromCsrTrigger_tdataVec_0_timing,
  input  [3:0]  io_fromCsrTrigger_tdataVec_0_action,
  input         io_fromCsrTrigger_tdataVec_0_chain,
  input         io_fromCsrTrigger_tdataVec_0_store,
  input  [63:0] io_fromCsrTrigger_tdataVec_0_tdata2,
  input  [1:0]  io_fromCsrTrigger_tdataVec_1_matchType,
  input         io_fromCsrTrigger_tdataVec_1_select,
  input         io_fromCsrTrigger_tdataVec_1_timing,
  input  [3:0]  io_fromCsrTrigger_tdataVec_1_action,
  input         io_fromCsrTrigger_tdataVec_1_chain,
  input         io_fromCsrTrigger_tdataVec_1_store,
  input  [63:0] io_fromCsrTrigger_tdataVec_1_tdata2,
  input  [1:0]  io_fromCsrTrigger_tdataVec_2_matchType,
  input         io_fromCsrTrigger_tdataVec_2_select,
  input         io_fromCsrTrigger_tdataVec_2_timing,
  input  [3:0]  io_fromCsrTrigger_tdataVec_2_action,
  input         io_fromCsrTrigger_tdataVec_2_chain,
  input         io_fromCsrTrigger_tdataVec_2_store,
  input  [63:0] io_fromCsrTrigger_tdataVec_2_tdata2,
  input  [1:0]  io_fromCsrTrigger_tdataVec_3_matchType,
  input         io_fromCsrTrigger_tdataVec_3_select,
  input         io_fromCsrTrigger_tdataVec_3_timing,
  input  [3:0]  io_fromCsrTrigger_tdataVec_3_action,
  input         io_fromCsrTrigger_tdataVec_3_chain,
  input         io_fromCsrTrigger_tdataVec_3_store,
  input  [63:0] io_fromCsrTrigger_tdataVec_3_tdata2,
  input         io_fromCsrTrigger_tEnableVec_0,
  input         io_fromCsrTrigger_tEnableVec_1,
  input         io_fromCsrTrigger_tEnableVec_2,
  input         io_fromCsrTrigger_tEnableVec_3,
  input         io_fromCsrTrigger_debugMode,
  input         io_fromCsrTrigger_triggerCanRaiseBpExp,
  output        io_s0_s1_valid
);

  wire        s2_exception_new_vec_6;
  wire        s2_out_af;
  wire        s2_kill;
  wire        s1_exception_new_vec_6;
  wire        s1_exception_new_vec_23;
  wire        s1_exception_new_vec_7;
  wire        s1_exception_new_vec_15;
  wire        s1_kill;
  wire [3:0]  _storeTrigger_tdataVec_io_toLoadStore_triggerAction;
  wire [49:0] _storeTrigger_tdataVec_io_toLoadStore_triggerVaddr;
  wire        s0_valid_probe = io_stin_valid | io_vecstin_valid | io_misalign_stin_valid;
  wire        s0_out_isvec = io_vecstin_valid & ~io_misalign_stin_valid;
  wire        io_stin_ready_0 =
    io_stin_valid & ~io_vecstin_valid & ~io_misalign_stin_valid;
  wire        io_st_mask_out_valid_0 = io_stin_ready_0 | s0_out_isvec;
  wire        s0_use_non_prf_flow = io_st_mask_out_valid_0 | io_misalign_stin_valid;
  wire [6:0]  s0_stin_uop_fuOpType =
    io_stin_ready_0 ? io_stin_bits_uop_fuOpType[6:0] : 7'h0;
  wire [11:0] s0_stin_uop_imm = io_stin_ready_0 ? io_stin_bits_uop_imm[11:0] : 12'h0;
  wire [63:0] s0_stin_src_0 = io_stin_ready_0 ? io_stin_bits_src_0 : 64'h0;
  wire [2:0]  s0_out_alignedType = s0_out_isvec ? io_vecstin_bits_alignedType : 3'h0;
  wire [8:0]  s0_uop_fuOpType =
    io_misalign_stin_valid
      ? io_misalign_stin_bits_uop_fuOpType
      : io_stin_ready_0
          ? io_stin_bits_uop_fuOpType
          : s0_out_isvec ? io_vecstin_bits_uop_fuOpType : 9'h0;
  wire        s0_uop_robIdx_flag =
    io_misalign_stin_valid
      ? io_misalign_stin_bits_uop_robIdx_flag
      : io_stin_ready_0
          ? io_stin_bits_uop_robIdx_flag
          : s0_out_isvec & io_vecstin_bits_uop_robIdx_flag;
  wire [7:0]  s0_uop_robIdx_value =
    io_misalign_stin_valid
      ? io_misalign_stin_bits_uop_robIdx_value
      : io_stin_ready_0
          ? io_stin_bits_uop_robIdx_value
          : s0_out_isvec ? io_vecstin_bits_uop_robIdx_value : 8'h0;
  wire [5:0]  s0_uop_sqIdx_value =
    io_misalign_stin_valid
      ? io_misalign_stin_bits_uop_sqIdx_value
      : io_stin_ready_0
          ? io_stin_bits_uop_sqIdx_value
          : s0_out_isvec ? io_vecstin_bits_uop_sqIdx_value : 6'h0;
  wire        s0_isFirstIssue =
    ~io_misalign_stin_valid
    & (io_stin_ready_0 & io_stin_bits_isFirstIssue | s0_out_isvec);
  wire [8:0]  _sx_ready_1_flushItself_T_2 =
    {io_redirect_bits_robIdx_flag, io_redirect_bits_robIdx_value};
  wire        _s0_fire_T_1_probe =
    s0_valid_probe
    & ~(io_redirect_valid
        & (io_redirect_bits_level
           & {s0_uop_robIdx_flag, s0_uop_robIdx_value} == _sx_ready_1_flushItself_T_2
           | s0_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
           ^ s0_uop_robIdx_value > io_redirect_bits_robIdx_value));
  wire        s0_vecActive = ~s0_out_isvec | s0_out_isvec & io_vecstin_bits_vecActive;
  wire [49:0] _s0_saddr_T_3 =
    50'(s0_stin_src_0[49:0] + {{38{s0_stin_uop_imm[11]}}, s0_stin_uop_imm});
  wire [49:0] _s0_vaddr_T_1 =
    s0_out_isvec ? io_vecstin_bits_vaddr[49:0] : io_prefetch_req_bits_vaddr;
  wire [49:0] s0_vaddr =
    io_misalign_stin_valid
      ? io_misalign_stin_bits_vaddr
      : io_stin_ready_0 ? _s0_saddr_T_3 : _s0_vaddr_T_1;
  wire        s0_isCbo =
    io_stin_ready_0
    & ((&(s0_stin_uop_fuOpType[3:2])) & s0_stin_uop_fuOpType[6:4] == 3'h0
       | s0_stin_uop_fuOpType[3:0] == 4'h7);
  wire        _GEN =
    ~io_stin_ready_0
    & ((&(s0_uop_fuOpType[3:2])) & s0_uop_fuOpType[6:4] == 3'h0
       | s0_uop_fuOpType[3:0] == 4'h7) & s0_valid_probe;
  wire [1:0]  s0_alignType =
    s0_out_isvec ? s0_out_alignedType[1:0] : s0_uop_fuOpType[1:0];
  wire        _s0_addr_Up_low_T_8 = s0_alignType == 2'h1;
  wire        _s0_addr_Up_low_T_2 = s0_alignType == 2'h2;
  wire        s0_addr_aligned =
    ~(|s0_alignType) | _s0_addr_Up_low_T_8 & ~(s0_vaddr[0]) | _s0_addr_Up_low_T_2
    & s0_vaddr[1:0] == 2'h0 | (&s0_alignType) & s0_vaddr[2:0] == 3'h0 | s0_isCbo;
  wire        _GEN_0 = s0_out_isvec & (|(s0_vaddr[3:0])) & s0_out_alignedType[2];
  wire [4:0]  _s0_addr_Up_low_T_11 =
    5'({2'h0,
        {1'h0, {1'h0, _s0_addr_Up_low_T_8} | {2{_s0_addr_Up_low_T_2}}}
          | {3{&s0_alignType}}} + s0_vaddr[4:0]);
  wire        s0_rs_corss16Bytes = _s0_addr_Up_low_T_11[4] != s0_vaddr[4];
  wire [30:0] _s0_mask_T_19 =
    {15'h0,
     {8'h0,
      {4'h0,
       {2'h0, {1'h0, s0_uop_fuOpType[2:0] == 3'h0} | {2{s0_uop_fuOpType[2:0] == 3'h1}}}
         | {4{s0_uop_fuOpType[2:0] == 3'h2}}} | {8{s0_uop_fuOpType[2:0] == 3'h3}}}
       | {16{s0_uop_fuOpType[2:0] == 3'h4}} | {16{&(s0_uop_fuOpType[2:0])}}}
    << _s0_saddr_T_3[3:0];
  wire [15:0] _s0_out_mask_T_14 =
    s0_rs_corss16Bytes & ~s0_addr_aligned
      ? {8'h0,
         {4'h0,
          {2'h0, {1'h0, ~(|s0_alignType)} | {2{s0_alignType == 2'h1}}}
            | {4{s0_alignType == 2'h2}}} | {8{&s0_alignType}}}
      : io_misalign_stin_valid
          ? io_misalign_stin_bits_mask
          : io_stin_ready_0
              ? _s0_mask_T_19[15:0]
              : s0_out_isvec ? io_vecstin_bits_mask : 16'hFFFF;
  reg  [63:0] s0_out_uop_debugInfo_tlbFirstReqTime_c;
  reg         s1_valid;
  wire        s1_valid_probe = s1_valid;
  reg         s1_in_uop_exceptionVec_0;
  reg         s1_in_uop_exceptionVec_1;
  reg         s1_in_uop_exceptionVec_2;
  reg         s1_in_uop_exceptionVec_4;
  reg         s1_in_uop_exceptionVec_5;
  reg         s1_in_uop_exceptionVec_8;
  reg         s1_in_uop_exceptionVec_9;
  reg         s1_in_uop_exceptionVec_10;
  reg         s1_in_uop_exceptionVec_11;
  reg         s1_in_uop_exceptionVec_12;
  reg         s1_in_uop_exceptionVec_13;
  reg         s1_in_uop_exceptionVec_14;
  reg         s1_in_uop_exceptionVec_16;
  reg         s1_in_uop_exceptionVec_17;
  reg         s1_in_uop_exceptionVec_18;
  reg         s1_in_uop_exceptionVec_19;
  reg         s1_in_uop_exceptionVec_20;
  reg         s1_in_uop_exceptionVec_21;
  reg         s1_in_uop_exceptionVec_22;
  reg         s1_in_uop_ftqPtr_flag;
  reg  [5:0]  s1_in_uop_ftqPtr_value;
  reg  [3:0]  s1_in_uop_ftqOffset;
  reg  [34:0] s1_in_uop_fuType;
  reg  [8:0]  s1_in_uop_fuOpType;
  reg         s1_in_uop_rfWen;
  reg  [7:0]  s1_in_uop_vpu_vstart;
  reg  [2:0]  s1_in_uop_vpu_nf;
  reg  [1:0]  s1_in_uop_vpu_veew;
  reg  [6:0]  s1_in_uop_uopIdx;
  reg  [7:0]  s1_in_uop_pdest;
  reg         s1_in_uop_robIdx_flag;
  reg  [7:0]  s1_in_uop_robIdx_value;
  reg         s1_in_uop_debugInfo_eliminatedMove;
  reg  [63:0] s1_in_uop_debugInfo_renameTime;
  reg  [63:0] s1_in_uop_debugInfo_dispatchTime;
  reg  [63:0] s1_in_uop_debugInfo_enqRsTime;
  reg  [63:0] s1_in_uop_debugInfo_selectTime;
  reg  [63:0] s1_in_uop_debugInfo_issueTime;
  reg  [63:0] s1_in_uop_debugInfo_writebackTime;
  reg  [63:0] s1_in_uop_debugInfo_runahead_checkpoint_id;
  reg  [63:0] s1_in_uop_debugInfo_tlbFirstReqTime;
  reg  [63:0] s1_in_uop_debugInfo_tlbRespTime;
  reg         s1_in_uop_lqIdx_flag;
  reg  [6:0]  s1_in_uop_lqIdx_value;
  reg         s1_in_uop_sqIdx_flag;
  reg  [5:0]  s1_in_uop_sqIdx_value;
  reg  [49:0] s1_in_vaddr;
  reg  [15:0] s1_in_mask;
  reg         s1_in_wlineflag;
  reg         s1_in_isvec;
  reg         s1_in_is128bit;
  reg  [7:0]  s1_in_elemIdx;
  reg  [2:0]  s1_in_alignedType;
  reg  [3:0]  s1_in_mbIndex;
  reg  [49:0] s1_in_vecBaseVaddr;
  reg         s1_in_vecActive;
  reg         s1_in_isFirstIssue;
  reg         s1_in_isFrmMisAlignBuf;
  reg         s1_in_isMisalign;
  reg         s1_in_isFinalSplit;
  reg         s1_in_misalignWith16Byte;
  wire        _s1_fire_T_1_probe = s1_valid & ~s1_kill;
  reg         s1_vecActive;
  reg         s1_isCbo;
  wire        s1_tlb_miss = io_tlb_resp_bits_miss & io_tlb_resp_valid & s1_valid;
  wire [1:0]  s1_pbmt = s1_tlb_miss ? 2'h0 : io_tlb_resp_bits_pbmt_0;
  reg         s1_isvec;
  reg         s1_frm_mab_vec;
  assign s1_kill =
    io_redirect_valid
    & (io_redirect_bits_level
       & {s1_in_uop_robIdx_flag, s1_in_uop_robIdx_value} == _sx_ready_1_flushItself_T_2
       | s1_in_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
       ^ s1_in_uop_robIdx_value > io_redirect_bits_robIdx_value) | s1_tlb_miss & ~s1_isvec
    & ~s1_in_isFrmMisAlignBuf;
  reg         io_issue_bits_r_uop_robIdx_flag;
  reg  [7:0]  io_issue_bits_r_uop_robIdx_value;
  wire        s1_trigger_debug_mode =
    _storeTrigger_tdataVec_io_toLoadStore_triggerAction == 4'h1;
  wire        s1_out_nc = s1_pbmt == 2'h1;
  wire        s1_out_mmio = s1_pbmt == 2'h2;
  assign s1_exception_new_vec_15 = io_tlb_resp_bits_excp_0_pf_st & s1_vecActive;
  assign s1_exception_new_vec_7 = io_tlb_resp_bits_excp_0_af_st & s1_vecActive;
  assign s1_exception_new_vec_23 = io_tlb_resp_bits_excp_0_gpf_st & s1_vecActive;
  assign s1_exception_new_vec_6 = s1_out_mmio & s1_in_isMisalign;
  reg  [63:0] s1_out_uop_debugInfo_tlbRespTime_c;
  wire [63:0] s1_out_uop_debugInfo_tlbRespTime =
    io_tlb_resp_valid & ~s1_tlb_miss
    & io_tlb_resp_bits_memidx_idx == {1'h0, s1_in_uop_sqIdx_value}
      ? s1_out_uop_debugInfo_tlbRespTime_c
      : s1_in_uop_debugInfo_tlbRespTime;
  reg         s1_mis_align_last_REG;
  wire        s1_mis_align =
    s1_valid & ~s1_tlb_miss & ~s1_isCbo & ~s1_out_nc & ~s1_out_mmio
    & s1_mis_align_last_REG & s1_in_isMisalign & ~s1_in_misalignWith16Byte
    & (|_storeTrigger_tdataVec_io_toLoadStore_triggerAction) & ~s1_trigger_debug_mode;
  reg         s2_valid;
  reg         s2_in_uop_exceptionVec_0;
  reg         s2_in_uop_exceptionVec_1;
  reg         s2_in_uop_exceptionVec_2;
  reg         s2_in_uop_exceptionVec_3;
  reg         s2_in_uop_exceptionVec_4;
  reg         s2_in_uop_exceptionVec_5;
  reg         s2_in_uop_exceptionVec_7;
  reg         s2_in_uop_exceptionVec_8;
  reg         s2_in_uop_exceptionVec_9;
  reg         s2_in_uop_exceptionVec_10;
  reg         s2_in_uop_exceptionVec_11;
  reg         s2_in_uop_exceptionVec_12;
  reg         s2_in_uop_exceptionVec_13;
  reg         s2_in_uop_exceptionVec_14;
  reg         s2_in_uop_exceptionVec_15;
  reg         s2_in_uop_exceptionVec_16;
  reg         s2_in_uop_exceptionVec_17;
  reg         s2_in_uop_exceptionVec_18;
  reg         s2_in_uop_exceptionVec_19;
  reg         s2_in_uop_exceptionVec_20;
  reg         s2_in_uop_exceptionVec_21;
  reg         s2_in_uop_exceptionVec_22;
  reg         s2_in_uop_exceptionVec_23;
  reg  [3:0]  s2_in_uop_trigger;
  reg         s2_in_uop_ftqPtr_flag;
  reg  [5:0]  s2_in_uop_ftqPtr_value;
  reg  [3:0]  s2_in_uop_ftqOffset;
  reg  [34:0] s2_in_uop_fuType;
  reg  [8:0]  s2_in_uop_fuOpType;
  reg         s2_in_uop_rfWen;
  reg  [7:0]  s2_in_uop_vpu_vstart;
  reg  [2:0]  s2_in_uop_vpu_nf;
  reg  [1:0]  s2_in_uop_vpu_veew;
  reg  [6:0]  s2_in_uop_uopIdx;
  reg  [7:0]  s2_in_uop_pdest;
  reg         s2_in_uop_robIdx_flag;
  reg  [7:0]  s2_in_uop_robIdx_value;
  reg         s2_in_uop_debugInfo_eliminatedMove;
  reg  [63:0] s2_in_uop_debugInfo_renameTime;
  reg  [63:0] s2_in_uop_debugInfo_dispatchTime;
  reg  [63:0] s2_in_uop_debugInfo_enqRsTime;
  reg  [63:0] s2_in_uop_debugInfo_selectTime;
  reg  [63:0] s2_in_uop_debugInfo_issueTime;
  reg  [63:0] s2_in_uop_debugInfo_writebackTime;
  reg  [63:0] s2_in_uop_debugInfo_runahead_checkpoint_id;
  reg  [63:0] s2_in_uop_debugInfo_tlbFirstReqTime;
  reg  [63:0] s2_in_uop_debugInfo_tlbRespTime;
  reg         s2_in_uop_lqIdx_flag;
  reg  [6:0]  s2_in_uop_lqIdx_value;
  reg         s2_in_uop_sqIdx_flag;
  reg  [5:0]  s2_in_uop_sqIdx_value;
  reg  [49:0] s2_in_vaddr;
  reg  [63:0] s2_in_fullva;
  reg         s2_in_vaNeedExt;
  reg  [47:0] s2_in_paddr;
  reg  [63:0] s2_in_gpaddr;
  reg  [15:0] s2_in_mask;
  reg         s2_in_nc;
  reg         s2_in_mmio;
  reg         s2_in_atomic;
  reg         s2_in_isHyper;
  reg         s2_in_isForVSnonLeafPTE;
  reg         s2_in_isvec;
  reg  [7:0]  s2_in_elemIdx;
  reg  [2:0]  s2_in_alignedType;
  reg  [3:0]  s2_in_mbIndex;
  reg  [49:0] s2_in_vecVaddrOffset;
  reg         s2_in_vecActive;
  reg         s2_in_isFrmMisAlignBuf;
  reg         s2_in_isMisalign;
  reg         s2_in_isFinalSplit;
  wire        _s2_fire_T_1 = s2_valid & ~s2_kill;
  reg         s2_vecActive;
  reg         s2_frm_mab_vec;
  reg  [1:0]  s2_pbmt;
  reg         s2_trigger_debug_mode;
  reg         s2_exception_REG;
  wire [4:0]  _GEN_1 =
    {s2_in_uop_exceptionVec_23,
     s2_in_uop_exceptionVec_15,
     s2_out_af,
     s2_exception_new_vec_6,
     s2_in_uop_exceptionVec_3};
  wire        s2_exception =
    s2_exception_REG & (s2_trigger_debug_mode | (|_GEN_1)) & s2_vecActive;
  reg         s2_un_misalign_exception_REG;
  wire        _s2_out_atomic_T = s2_pbmt == 2'h0;
  reg         s2_mmio_REG;
  wire        s2_mmio = (s2_in_mmio | _s2_out_atomic_T & io_pmp_mmio) & s2_mmio_REG;
  reg         s2_actually_uncache_REG;
  reg         s2_isCbo;
  assign s2_kill =
    s2_mmio & ~s2_exception & ~s2_in_isvec & ~s2_in_isFrmMisAlignBuf | io_redirect_valid
    & (io_redirect_bits_level
       & {s2_in_uop_robIdx_flag, s2_in_uop_robIdx_value} == _sx_ready_1_flushItself_T_2
       | s2_in_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
       ^ s2_in_uop_robIdx_value > io_redirect_bits_robIdx_value);
  wire        s2_out_mmio = s2_mmio & ~s2_exception;
  reg         s2_out_uop_exceptionVec_7_REG;
  assign s2_out_af =
    (s2_in_uop_exceptionVec_7 | io_pmp_st
     | (s2_in_isvec | s2_in_isFrmMisAlignBuf | s2_isCbo)
     & (_s2_out_atomic_T & io_pmp_mmio | s2_in_nc | s2_in_mmio) & s2_actually_uncache_REG
     & s2_out_uop_exceptionVec_7_REG) & s2_vecActive;
  assign s2_exception_new_vec_6 =
    s2_mmio & s2_in_isMisalign
    & ~(s2_un_misalign_exception_REG
        & (s2_trigger_debug_mode
           | (|{s2_in_uop_exceptionVec_23,
                s2_in_uop_exceptionVec_15,
                s2_out_af,
                s2_in_uop_exceptionVec_3})));
  reg         s2_mis_align_r;
  wire        s2_mis_align = s2_valid & s2_mis_align_r & ~s2_exception;
  reg         toMisalignBufferValid_last_REG;
  wire        toMisalignBufferValid = s2_valid & toMisalignBufferValid_last_REG;
  wire        misalignBufferNack = toMisalignBufferValid & ~io_misalign_buf_ready;
  wire [8:0]  _s2_vecFeedback_flushItself_T_1 =
    {s1_in_uop_robIdx_flag, s1_in_uop_robIdx_value};
  wire        s2_vecFeedback_differentFlag =
    s1_in_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag;
  wire        s2_vecFeedback_compare =
    s1_in_uop_robIdx_value > io_redirect_bits_robIdx_value;
  wire        feedback_slow_valid =
    s1_valid
    & ~(io_redirect_valid
        & (io_redirect_bits_level
           & _s2_vecFeedback_flushItself_T_1 == _sx_ready_1_flushItself_T_2
           | s2_vecFeedback_differentFlag ^ s2_vecFeedback_compare)) & ~s1_in_isvec
    & ~s1_in_isFrmMisAlignBuf;
  reg         io_feedback_slow_valid_last_REG;
  reg         io_feedback_slow_bits_r_robIdx_flag;
  reg  [7:0]  io_feedback_slow_bits_r_robIdx_value;
  reg         io_feedback_slow_bits_r_flushState;
  reg         io_feedback_slow_bits_r_sqIdx_flag;
  reg  [5:0]  io_feedback_slow_bits_r_sqIdx_value;
  reg         io_feedback_slow_bits_r_lqIdx_flag;
  reg  [6:0]  io_feedback_slow_bits_r_lqIdx_value;
  reg         io_feedback_slow_bits_hit_r;
  reg         s2_vecFeedback_REG;
  reg         s2_misalign_stout_bits_need_rep_r;
  reg         s3_valid;
  reg         s3_in_uop_exceptionVec_3;
  reg         s3_in_uop_exceptionVec_6;
  reg         s3_in_uop_exceptionVec_7;
  reg         s3_in_uop_exceptionVec_15;
  reg         s3_in_uop_exceptionVec_23;
  reg  [3:0]  s3_in_uop_trigger;
  reg         s3_in_uop_rfWen;
  reg  [7:0]  s3_in_uop_vpu_vstart;
  reg  [7:0]  s3_in_uop_pdest;
  reg         s3_in_uop_robIdx_flag;
  reg  [7:0]  s3_in_uop_robIdx_value;
  reg         s3_in_uop_debugInfo_eliminatedMove;
  reg  [63:0] s3_in_uop_debugInfo_renameTime;
  reg  [63:0] s3_in_uop_debugInfo_dispatchTime;
  reg  [63:0] s3_in_uop_debugInfo_enqRsTime;
  reg  [63:0] s3_in_uop_debugInfo_selectTime;
  reg  [63:0] s3_in_uop_debugInfo_issueTime;
  reg  [63:0] s3_in_uop_debugInfo_writebackTime;
  reg  [63:0] s3_in_uop_debugInfo_runahead_checkpoint_id;
  reg  [63:0] s3_in_uop_debugInfo_tlbFirstReqTime;
  reg  [63:0] s3_in_uop_debugInfo_tlbRespTime;
  reg         s3_in_uop_sqIdx_flag;
  reg  [5:0]  s3_in_uop_sqIdx_value;
  reg  [49:0] s3_in_vaddr;
  reg  [63:0] s3_in_fullva;
  reg         s3_in_vaNeedExt;
  reg  [47:0] s3_in_paddr;
  reg  [63:0] s3_in_gpaddr;
  reg  [15:0] s3_in_mask;
  reg         s3_in_nc;
  reg         s3_in_mmio;
  reg         s3_in_isForVSnonLeafPTE;
  reg         s3_in_isvec;
  reg  [7:0]  s3_in_elemIdx;
  reg  [3:0]  s3_in_mbIndex;
  reg         s3_in_vecActive;
  reg         s3_vecFeedback;
  reg         s3_exception;
  wire        _GEN_2 = s3_valid & s3_in_isvec & s3_in_vecActive & s3_in_mask == 16'h0;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (_GEN & ~reset) begin
        if (`ASSERT_VERBOSE_COND_)
          $fwrite(32'h80000002, "Assertion failed\n    at LogUtils.scala:126 assert(false.B) //assert at current module for better error location\n");
        if (`STOP_COND_)
          assert(1'b0);
      end
      if (_GEN_0 & ~reset) begin
        if (`ASSERT_VERBOSE_COND_)
          $fwrite(32'h80000002, "Assertion failed\n    at LogUtils.scala:126 assert(false.B) //assert at current module for better error location\n");
        if (`STOP_COND_)
          assert(1'b0);
      end
      if (_GEN_2 & ~reset) begin
        if (`ASSERT_VERBOSE_COND_)
          $fwrite(32'h80000002, "Assertion failed\n    at LogUtils.scala:126 assert(false.B) //assert at current module for better error location\n");
        if (`STOP_COND_)
          assert(1'b0);
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _prev_fire_T_4 =
    s3_valid
    & ~(io_redirect_valid
        & (io_redirect_bits_level
           & {s3_in_uop_robIdx_flag,
              s3_in_uop_robIdx_value} == _sx_ready_1_flushItself_T_2
           | s3_in_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
           ^ s3_in_uop_robIdx_value > io_redirect_bits_robIdx_value));
  reg         sx_valid_1_r;
  reg         sx_in_1_r_output_uop_exceptionVec_3;
  reg         sx_in_1_r_output_uop_exceptionVec_6;
  reg         sx_in_1_r_output_uop_exceptionVec_7;
  reg         sx_in_1_r_output_uop_exceptionVec_15;
  reg         sx_in_1_r_output_uop_exceptionVec_23;
  reg  [3:0]  sx_in_1_r_output_uop_trigger;
  reg         sx_in_1_r_output_uop_rfWen;
  reg  [7:0]  sx_in_1_r_output_uop_vpu_vstart;
  reg  [7:0]  sx_in_1_r_output_uop_pdest;
  reg         sx_in_1_r_output_uop_robIdx_flag;
  reg  [7:0]  sx_in_1_r_output_uop_robIdx_value;
  reg         sx_in_1_r_output_uop_debugInfo_eliminatedMove;
  reg  [63:0] sx_in_1_r_output_uop_debugInfo_renameTime;
  reg  [63:0] sx_in_1_r_output_uop_debugInfo_dispatchTime;
  reg  [63:0] sx_in_1_r_output_uop_debugInfo_enqRsTime;
  reg  [63:0] sx_in_1_r_output_uop_debugInfo_selectTime;
  reg  [63:0] sx_in_1_r_output_uop_debugInfo_issueTime;
  reg  [63:0] sx_in_1_r_output_uop_debugInfo_writebackTime;
  reg  [63:0] sx_in_1_r_output_uop_debugInfo_runahead_checkpoint_id;
  reg  [63:0] sx_in_1_r_output_uop_debugInfo_tlbFirstReqTime;
  reg  [63:0] sx_in_1_r_output_uop_debugInfo_tlbRespTime;
  reg         sx_in_1_r_output_uop_sqIdx_flag;
  reg  [5:0]  sx_in_1_r_output_uop_sqIdx_value;
  reg         sx_in_1_r_output_debug_isMMIO;
  reg         sx_in_1_r_output_debug_isNC;
  reg  [47:0] sx_in_1_r_output_debug_paddr;
  reg  [49:0] sx_in_1_r_output_debug_vaddr;
  reg         sx_in_1_r_vecFeedback;
  reg         sx_in_1_r_hasException;
  reg  [7:0]  sx_in_1_r_elemIdx;
  reg  [3:0]  sx_in_1_r_mbIndex;
  reg  [15:0] sx_in_1_r_mask;
  reg  [63:0] sx_in_1_r_vaddr;
  reg         sx_in_1_r_vaNeedExt;
  reg  [49:0] sx_in_1_r_gpaddr;
  reg         sx_in_1_r_isForVSnonLeafPTE;
  reg         sx_in_vec_1_r;
  wire        _GEN_3 = _s0_fire_T_1_probe & s0_out_isvec;
  wire        _GEN_4 = _s0_fire_T_1_probe & s0_isFirstIssue;
  wire        _GEN_5 = _s0_fire_T_1_probe & ~s0_out_isvec;
  wire        _GEN_6 = _GEN_5 & _s0_saddr_T_3[49:12] == s0_stin_src_0[49:12];
  wire        _GEN_7 = _GEN_5 & _s0_saddr_T_3[49:12] != s0_stin_src_0[49:12];
  wire        _GEN_8 = _GEN_6 & s0_isFirstIssue;
  wire        _GEN_9 = _GEN_7 & s0_isFirstIssue;
  wire        _GEN_10 = _s1_fire_T_1_probe & s1_in_isFirstIssue;
  wire        _GEN_11 = _s1_fire_T_1_probe & s1_tlb_miss;
  wire        _GEN_12 = _GEN_11 & s1_in_isFirstIssue;
  wire        s3_kill =
    io_redirect_valid
    & (io_redirect_bits_level
       & {s3_in_uop_robIdx_flag, s3_in_uop_robIdx_value} == _sx_ready_1_flushItself_T_2
       | s3_in_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
       ^ s3_in_uop_robIdx_value > io_redirect_bits_robIdx_value);
  wire        cur_kill =
    io_redirect_valid
    & (io_redirect_bits_level
       & {sx_in_1_r_output_uop_robIdx_flag,
          sx_in_1_r_output_uop_robIdx_value} == _sx_ready_1_flushItself_T_2
       | sx_in_1_r_output_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
       ^ sx_in_1_r_output_uop_robIdx_value > io_redirect_bits_robIdx_value);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      s0_out_uop_debugInfo_tlbFirstReqTime_c <= 64'h0;
      s1_valid <= 1'h0;
      s1_vecActive <= 1'h1;
      s1_isvec <= 1'h0;
      s1_frm_mab_vec <= 1'h0;
      s1_out_uop_debugInfo_tlbRespTime_c <= 64'h0;
      s1_mis_align_last_REG <= 1'h0;
      s2_valid <= 1'h0;
      s2_vecActive <= 1'h1;
      s2_frm_mab_vec <= 1'h1;
      s2_trigger_debug_mode <= 1'h0;
      toMisalignBufferValid_last_REG <= 1'h0;
      io_feedback_slow_valid_last_REG <= 1'h0;
      s3_valid <= 1'h0;
      sx_valid_1_r <= 1'h0;
    end
    else begin
      s0_out_uop_debugInfo_tlbFirstReqTime_c <=
        64'(s0_out_uop_debugInfo_tlbFirstReqTime_c + 64'h1);
      s1_valid <= _s0_fire_T_1_probe | ~(_s1_fire_T_1_probe | s1_kill) & s1_valid;
      if (_s0_fire_T_1_probe) begin
        s1_vecActive <= s0_vecActive;
        s1_isvec <= s0_out_isvec;
        s1_frm_mab_vec <= io_misalign_stin_valid & io_misalign_stin_bits_isvec;
      end
      s1_out_uop_debugInfo_tlbRespTime_c <=
        64'(s1_out_uop_debugInfo_tlbRespTime_c + 64'h1);
      s1_mis_align_last_REG <= io_csrCtrl_hd_misalign_st_enable;
      s2_valid <= _s1_fire_T_1_probe | ~(_s2_fire_T_1 | s2_kill) & s2_valid;
      if (_s1_fire_T_1_probe) begin
        s2_vecActive <= s1_in_vecActive;
        s2_frm_mab_vec <= s1_frm_mab_vec;
        s2_trigger_debug_mode <= s1_trigger_debug_mode;
      end
      toMisalignBufferValid_last_REG <= s1_mis_align & ~s1_in_isFrmMisAlignBuf;
      io_feedback_slow_valid_last_REG <= feedback_slow_valid;
      if (_s2_fire_T_1)
        s3_valid <=
          (~s2_mmio & ~s2_isCbo | s2_exception) & ~s2_mis_align & ~s2_in_isFrmMisAlignBuf;
      else
        s3_valid <= ~(s3_valid & ~s3_kill | s3_kill) & s3_valid;
      if (_prev_fire_T_4 | sx_valid_1_r & ~cur_kill | cur_kill)
        sx_valid_1_r <= _prev_fire_T_4;
    end
  end // always @(posedge, posedge)
  wire        _GEN_13 = io_stin_ready_0 | ~s0_out_isvec;
  wire        s0_out_misalignWith16Byte = ~s0_rs_corss16Bytes & ~s0_addr_aligned;
  wire [49:0] _s2_out_uop_vpu_vstart_T = s2_in_vecVaddrOffset >> s2_in_uop_vpu_veew;
  always @(posedge clock) begin
    if (_s0_fire_T_1_probe) begin
      s1_in_uop_exceptionVec_0 <=
        io_misalign_stin_valid & io_misalign_stin_bits_uop_exceptionVec_0;
      s1_in_uop_exceptionVec_1 <=
        io_misalign_stin_valid & io_misalign_stin_bits_uop_exceptionVec_1;
      s1_in_uop_exceptionVec_2 <=
        io_misalign_stin_valid & io_misalign_stin_bits_uop_exceptionVec_2;
      s1_in_uop_exceptionVec_4 <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_exceptionVec_4
          : ~io_stin_ready_0 & s0_out_isvec & io_vecstin_bits_uop_exceptionVec_4;
      s1_in_uop_exceptionVec_5 <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_exceptionVec_5
          : ~io_stin_ready_0 & s0_out_isvec & io_vecstin_bits_uop_exceptionVec_5;
      s1_in_uop_exceptionVec_8 <=
        io_misalign_stin_valid & io_misalign_stin_bits_uop_exceptionVec_8;
      s1_in_uop_exceptionVec_9 <=
        io_misalign_stin_valid & io_misalign_stin_bits_uop_exceptionVec_9;
      s1_in_uop_exceptionVec_10 <=
        io_misalign_stin_valid & io_misalign_stin_bits_uop_exceptionVec_10;
      s1_in_uop_exceptionVec_11 <=
        io_misalign_stin_valid & io_misalign_stin_bits_uop_exceptionVec_11;
      s1_in_uop_exceptionVec_12 <=
        io_misalign_stin_valid & io_misalign_stin_bits_uop_exceptionVec_12;
      s1_in_uop_exceptionVec_13 <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_exceptionVec_13
          : ~io_stin_ready_0 & s0_out_isvec & io_vecstin_bits_uop_exceptionVec_13;
      s1_in_uop_exceptionVec_14 <=
        io_misalign_stin_valid & io_misalign_stin_bits_uop_exceptionVec_14;
      s1_in_uop_exceptionVec_16 <=
        io_misalign_stin_valid & io_misalign_stin_bits_uop_exceptionVec_16;
      s1_in_uop_exceptionVec_17 <=
        io_misalign_stin_valid & io_misalign_stin_bits_uop_exceptionVec_17;
      s1_in_uop_exceptionVec_18 <=
        io_misalign_stin_valid & io_misalign_stin_bits_uop_exceptionVec_18;
      s1_in_uop_exceptionVec_19 <=
        io_misalign_stin_valid & io_misalign_stin_bits_uop_exceptionVec_19;
      s1_in_uop_exceptionVec_20 <=
        io_misalign_stin_valid & io_misalign_stin_bits_uop_exceptionVec_20;
      s1_in_uop_exceptionVec_21 <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_exceptionVec_21
          : ~io_stin_ready_0 & s0_out_isvec & io_vecstin_bits_uop_exceptionVec_21;
      s1_in_uop_exceptionVec_22 <=
        io_misalign_stin_valid & io_misalign_stin_bits_uop_exceptionVec_22;
      s1_in_uop_ftqPtr_flag <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_ftqPtr_flag
          : io_stin_ready_0
              ? io_stin_bits_uop_ftqPtr_flag
              : s0_out_isvec & io_vecstin_bits_uop_ftqPtr_flag;
      s1_in_uop_ftqPtr_value <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_ftqPtr_value
          : io_stin_ready_0
              ? io_stin_bits_uop_ftqPtr_value
              : s0_out_isvec ? io_vecstin_bits_uop_ftqPtr_value : 6'h0;
      s1_in_uop_ftqOffset <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_ftqOffset
          : io_stin_ready_0
              ? io_stin_bits_uop_ftqOffset
              : s0_out_isvec ? io_vecstin_bits_uop_ftqOffset : 4'h0;
      s1_in_uop_fuType <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_fuType
          : io_stin_ready_0
              ? io_stin_bits_uop_fuType
              : s0_out_isvec ? io_vecstin_bits_uop_fuType : 35'h0;
      s1_in_uop_fuOpType <= s0_uop_fuOpType;
      s1_in_uop_rfWen <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_rfWen
          : io_stin_ready_0
              ? io_stin_bits_uop_rfWen
              : s0_out_isvec & io_vecstin_bits_uop_rfWen;
      s1_in_uop_vpu_vstart <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_vpu_vstart
          : _GEN_13 ? 8'h0 : io_vecstin_bits_uop_vpu_vstart;
      s1_in_uop_vpu_nf <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_vpu_nf
          : _GEN_13 ? 3'h0 : io_vecstin_bits_uop_vpu_nf;
      s1_in_uop_vpu_veew <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_vpu_veew
          : _GEN_13 ? 2'h0 : io_vecstin_bits_uop_vpu_veew;
      s1_in_uop_uopIdx <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_uopIdx
          : _GEN_13 ? 7'h0 : io_vecstin_bits_uop_uopIdx;
      s1_in_uop_pdest <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_pdest
          : io_stin_ready_0
              ? io_stin_bits_uop_pdest
              : s0_out_isvec ? io_vecstin_bits_uop_pdest : 8'h0;
      s1_in_uop_robIdx_flag <= s0_uop_robIdx_flag;
      s1_in_uop_robIdx_value <= s0_uop_robIdx_value;
      s1_in_uop_debugInfo_eliminatedMove <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_debugInfo_eliminatedMove
          : io_stin_ready_0
              ? io_stin_bits_uop_debugInfo_eliminatedMove
              : s0_out_isvec & io_vecstin_bits_uop_debugInfo_eliminatedMove;
      s1_in_uop_debugInfo_renameTime <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_debugInfo_renameTime
          : io_stin_ready_0
              ? io_stin_bits_uop_debugInfo_renameTime
              : s0_out_isvec ? io_vecstin_bits_uop_debugInfo_renameTime : 64'h0;
      s1_in_uop_debugInfo_dispatchTime <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_debugInfo_dispatchTime
          : io_stin_ready_0
              ? io_stin_bits_uop_debugInfo_dispatchTime
              : s0_out_isvec ? io_vecstin_bits_uop_debugInfo_dispatchTime : 64'h0;
      s1_in_uop_debugInfo_enqRsTime <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_debugInfo_enqRsTime
          : io_stin_ready_0
              ? io_stin_bits_uop_debugInfo_enqRsTime
              : s0_out_isvec ? io_vecstin_bits_uop_debugInfo_enqRsTime : 64'h0;
      s1_in_uop_debugInfo_selectTime <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_debugInfo_selectTime
          : io_stin_ready_0
              ? io_stin_bits_uop_debugInfo_selectTime
              : s0_out_isvec ? io_vecstin_bits_uop_debugInfo_selectTime : 64'h0;
      s1_in_uop_debugInfo_issueTime <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_debugInfo_issueTime
          : io_stin_ready_0
              ? io_stin_bits_uop_debugInfo_issueTime
              : s0_out_isvec ? io_vecstin_bits_uop_debugInfo_issueTime : 64'h0;
      s1_in_uop_debugInfo_writebackTime <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_debugInfo_writebackTime
          : io_stin_ready_0
              ? io_stin_bits_uop_debugInfo_writebackTime
              : s0_out_isvec ? io_vecstin_bits_uop_debugInfo_writebackTime : 64'h0;
      s1_in_uop_debugInfo_runahead_checkpoint_id <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_debugInfo_runahead_checkpoint_id
          : io_stin_ready_0
              ? io_stin_bits_uop_debugInfo_runahead_checkpoint_id
              : s0_out_isvec
                  ? io_vecstin_bits_uop_debugInfo_runahead_checkpoint_id
                  : 64'h0;
      s1_in_uop_debugInfo_tlbFirstReqTime <=
        s0_valid_probe & s0_isFirstIssue
          ? s0_out_uop_debugInfo_tlbFirstReqTime_c
          : io_misalign_stin_valid
              ? io_misalign_stin_bits_uop_debugInfo_tlbFirstReqTime
              : io_stin_ready_0
                  ? io_stin_bits_uop_debugInfo_tlbFirstReqTime
                  : s0_out_isvec ? io_vecstin_bits_uop_debugInfo_tlbFirstReqTime : 64'h0;
      s1_in_uop_debugInfo_tlbRespTime <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_debugInfo_tlbRespTime
          : io_stin_ready_0
              ? io_stin_bits_uop_debugInfo_tlbRespTime
              : s0_out_isvec ? io_vecstin_bits_uop_debugInfo_tlbRespTime : 64'h0;
      s1_in_uop_lqIdx_flag <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_lqIdx_flag
          : io_stin_ready_0
              ? io_stin_bits_uop_lqIdx_flag
              : s0_out_isvec & io_vecstin_bits_uop_lqIdx_flag;
      s1_in_uop_lqIdx_value <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_lqIdx_value
          : io_stin_ready_0
              ? io_stin_bits_uop_lqIdx_value
              : s0_out_isvec ? io_vecstin_bits_uop_lqIdx_value : 7'h0;
      s1_in_uop_sqIdx_flag <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_uop_sqIdx_flag
          : io_stin_ready_0
              ? io_stin_bits_uop_sqIdx_flag
              : s0_out_isvec & io_vecstin_bits_uop_sqIdx_flag;
      s1_in_uop_sqIdx_value <= s0_uop_sqIdx_value;
      s1_in_vaddr <= s0_vaddr;
      s1_in_mask <= _s0_out_mask_T_14;
      s1_in_wlineflag <= io_stin_ready_0 & s0_uop_fuOpType == 9'h7;
      s1_in_isvec <= s0_out_isvec;
      s1_in_is128bit <=
        io_misalign_stin_valid
          ? io_misalign_stin_bits_is128bit
          : s0_out_alignedType[2] | s0_out_misalignWith16Byte;
      s1_in_elemIdx <= s0_out_isvec ? io_vecstin_bits_elemIdx : 8'h0;
      s1_in_alignedType <= s0_out_alignedType;
      s1_in_mbIndex <= s0_out_isvec ? io_vecstin_bits_mBIndex : 4'h0;
      s1_in_vecBaseVaddr <= s0_out_isvec ? io_vecstin_bits_basevaddr : 50'h0;
      s1_in_vecActive <= s0_vecActive;
      s1_in_isFirstIssue <= s0_isFirstIssue;
      s1_in_isFrmMisAlignBuf <= io_misalign_stin_valid;
      s1_in_isMisalign <=
        s0_use_non_prf_flow
        & (~s0_addr_aligned | s0_out_isvec & io_vecstin_bits_uop_exceptionVec_6
           & s0_vecActive);
      s1_in_isFinalSplit <= io_misalign_stin_valid & io_misalign_stin_bits_isFinalSplit;
      s1_in_misalignWith16Byte <= s0_out_misalignWith16Byte;
      s1_isCbo <= s0_isCbo;
    end
    if (s0_valid_probe) begin
      io_issue_bits_r_uop_robIdx_flag <= io_stin_ready_0 & io_stin_bits_uop_robIdx_flag;
      io_issue_bits_r_uop_robIdx_value <=
        io_stin_ready_0 ? io_stin_bits_uop_robIdx_value : 8'h0;
    end
    if (_s1_fire_T_1_probe) begin
      s2_in_uop_exceptionVec_0 <= s1_in_uop_exceptionVec_0;
      s2_in_uop_exceptionVec_1 <= s1_in_uop_exceptionVec_1;
      s2_in_uop_exceptionVec_2 <= s1_in_uop_exceptionVec_2;
      s2_in_uop_exceptionVec_3 <= ~(|_storeTrigger_tdataVec_io_toLoadStore_triggerAction);
      s2_in_uop_exceptionVec_4 <= s1_in_uop_exceptionVec_4;
      s2_in_uop_exceptionVec_5 <= s1_in_uop_exceptionVec_5;
      s2_in_uop_exceptionVec_7 <= s1_exception_new_vec_7;
      s2_in_uop_exceptionVec_8 <= s1_in_uop_exceptionVec_8;
      s2_in_uop_exceptionVec_9 <= s1_in_uop_exceptionVec_9;
      s2_in_uop_exceptionVec_10 <= s1_in_uop_exceptionVec_10;
      s2_in_uop_exceptionVec_11 <= s1_in_uop_exceptionVec_11;
      s2_in_uop_exceptionVec_12 <= s1_in_uop_exceptionVec_12;
      s2_in_uop_exceptionVec_13 <= s1_in_uop_exceptionVec_13;
      s2_in_uop_exceptionVec_14 <= s1_in_uop_exceptionVec_14;
      s2_in_uop_exceptionVec_15 <= s1_exception_new_vec_15;
      s2_in_uop_exceptionVec_16 <= s1_in_uop_exceptionVec_16;
      s2_in_uop_exceptionVec_17 <= s1_in_uop_exceptionVec_17;
      s2_in_uop_exceptionVec_18 <= s1_in_uop_exceptionVec_18;
      s2_in_uop_exceptionVec_19 <= s1_in_uop_exceptionVec_19;
      s2_in_uop_exceptionVec_20 <= s1_in_uop_exceptionVec_20;
      s2_in_uop_exceptionVec_21 <= s1_in_uop_exceptionVec_21;
      s2_in_uop_exceptionVec_22 <= s1_in_uop_exceptionVec_22;
      s2_in_uop_exceptionVec_23 <= s1_exception_new_vec_23;
      s2_in_uop_trigger <= _storeTrigger_tdataVec_io_toLoadStore_triggerAction;
      s2_in_uop_ftqPtr_flag <= s1_in_uop_ftqPtr_flag;
      s2_in_uop_ftqPtr_value <= s1_in_uop_ftqPtr_value;
      s2_in_uop_ftqOffset <= s1_in_uop_ftqOffset;
      s2_in_uop_fuType <= s1_in_uop_fuType;
      s2_in_uop_fuOpType <= s1_in_uop_fuOpType;
      s2_in_uop_rfWen <= s1_in_uop_rfWen;
      s2_in_uop_vpu_vstart <= s1_in_uop_vpu_vstart;
      s2_in_uop_vpu_nf <= s1_in_uop_vpu_nf;
      s2_in_uop_vpu_veew <= s1_in_uop_vpu_veew;
      s2_in_uop_uopIdx <= s1_in_uop_uopIdx;
      s2_in_uop_pdest <= s1_in_uop_pdest;
      s2_in_uop_robIdx_flag <= s1_in_uop_robIdx_flag;
      s2_in_uop_robIdx_value <= s1_in_uop_robIdx_value;
      s2_in_uop_debugInfo_eliminatedMove <= s1_in_uop_debugInfo_eliminatedMove;
      s2_in_uop_debugInfo_renameTime <= s1_in_uop_debugInfo_renameTime;
      s2_in_uop_debugInfo_dispatchTime <= s1_in_uop_debugInfo_dispatchTime;
      s2_in_uop_debugInfo_enqRsTime <= s1_in_uop_debugInfo_enqRsTime;
      s2_in_uop_debugInfo_selectTime <= s1_in_uop_debugInfo_selectTime;
      s2_in_uop_debugInfo_issueTime <= s1_in_uop_debugInfo_issueTime;
      s2_in_uop_debugInfo_writebackTime <= s1_in_uop_debugInfo_writebackTime;
      s2_in_uop_debugInfo_runahead_checkpoint_id <=
        s1_in_uop_debugInfo_runahead_checkpoint_id;
      s2_in_uop_debugInfo_tlbFirstReqTime <= s1_in_uop_debugInfo_tlbFirstReqTime;
      s2_in_uop_debugInfo_tlbRespTime <= s1_out_uop_debugInfo_tlbRespTime;
      s2_in_uop_lqIdx_flag <= s1_in_uop_lqIdx_flag;
      s2_in_uop_lqIdx_value <= s1_in_uop_lqIdx_value;
      s2_in_uop_sqIdx_flag <= s1_in_uop_sqIdx_flag;
      s2_in_uop_sqIdx_value <= s1_in_uop_sqIdx_value;
      s2_in_vaddr <= s1_in_vaddr;
      s2_in_fullva <= io_tlb_resp_bits_fullva;
      s2_in_vaNeedExt <= io_tlb_resp_bits_excp_0_vaNeedExt;
      s2_in_paddr <= io_tlb_resp_bits_paddr_0;
      s2_in_gpaddr <= io_tlb_resp_bits_gpaddr_0;
      s2_in_mask <= s1_in_mask;
      s2_in_nc <= s1_out_nc;
      s2_in_mmio <= s1_out_mmio;
      s2_in_atomic <= s1_out_mmio;
      s2_in_isHyper <= io_tlb_resp_bits_excp_0_isHyper;
      s2_in_isForVSnonLeafPTE <= io_tlb_resp_bits_isForVSnonLeafPTE;
      s2_in_isvec <= s1_in_isvec;
      s2_in_elemIdx <= s1_in_elemIdx;
      s2_in_alignedType <= s1_in_alignedType;
      s2_in_mbIndex <= s1_in_mbIndex;
      s2_in_vecVaddrOffset <=
        s1_trigger_debug_mode | ~(|_storeTrigger_tdataVec_io_toLoadStore_triggerAction)
          ? 50'(_storeTrigger_tdataVec_io_toLoadStore_triggerVaddr - s1_in_vecBaseVaddr)
          : 50'(50'(s1_in_vaddr
                    + {46'h0,
                       s1_in_mask[0]
                         ? 4'h0
                         : s1_in_mask[1]
                             ? 4'h1
                             : s1_in_mask[2]
                                 ? 4'h2
                                 : s1_in_mask[3]
                                     ? 4'h3
                                     : s1_in_mask[4]
                                         ? 4'h4
                                         : s1_in_mask[5]
                                             ? 4'h5
                                             : s1_in_mask[6]
                                                 ? 4'h6
                                                 : s1_in_mask[7]
                                                     ? 4'h7
                                                     : s1_in_mask[8]
                                                         ? 4'h8
                                                         : s1_in_mask[9]
                                                             ? 4'h9
                                                             : s1_in_mask[10]
                                                                 ? 4'hA
                                                                 : s1_in_mask[11]
                                                                     ? 4'hB
                                                                     : s1_in_mask[12]
                                                                         ? 4'hC
                                                                         : s1_in_mask[13]
                                                                             ? 4'hD
                                                                             : s1_in_mask[14]
                                                                                 ? 4'hE
                                                                                 : {4{s1_in_mask[15]}}})
                - s1_in_vecBaseVaddr);
      s2_in_vecActive <= s1_in_vecActive;
      s2_in_isFrmMisAlignBuf <= s1_in_isFrmMisAlignBuf;
      s2_in_isMisalign <= s1_in_isMisalign;
      s2_in_isFinalSplit <= s1_in_isFinalSplit;
      s2_pbmt <= s1_pbmt;
      s2_isCbo <= s1_isCbo;
      s2_mis_align_r <= s1_mis_align;
      s2_misalign_stout_bits_need_rep_r <= s1_tlb_miss;
    end
    s2_exception_REG <= ~s1_tlb_miss;
    s2_un_misalign_exception_REG <= ~s1_tlb_miss;
    s2_mmio_REG <= ~s1_tlb_miss;
    s2_actually_uncache_REG <= ~s1_tlb_miss;
    s2_out_uop_exceptionVec_7_REG <= ~s1_tlb_miss;
    if (feedback_slow_valid) begin
      io_feedback_slow_bits_r_robIdx_flag <= s1_in_uop_robIdx_flag;
      io_feedback_slow_bits_r_robIdx_value <= s1_in_uop_robIdx_value;
      io_feedback_slow_bits_r_flushState <= io_tlb_resp_bits_ptwBack;
      io_feedback_slow_bits_r_sqIdx_flag <= s1_in_uop_sqIdx_flag;
      io_feedback_slow_bits_r_sqIdx_value <= s1_in_uop_sqIdx_value;
      io_feedback_slow_bits_r_lqIdx_flag <= s1_in_uop_lqIdx_flag;
      io_feedback_slow_bits_r_lqIdx_value <= s1_in_uop_lqIdx_value;
      io_feedback_slow_bits_hit_r <= ~s1_tlb_miss;
    end
    s2_vecFeedback_REG <=
      ~(io_redirect_valid
        & (io_redirect_bits_level
           & _s2_vecFeedback_flushItself_T_1 == _sx_ready_1_flushItself_T_2
           | s2_vecFeedback_differentFlag ^ s2_vecFeedback_compare)) & ~s1_tlb_miss
      & s1_valid;
    if (_s2_fire_T_1) begin
      s3_in_uop_exceptionVec_3 <= s2_in_uop_exceptionVec_3;
      s3_in_uop_exceptionVec_6 <= s2_exception_new_vec_6;
      s3_in_uop_exceptionVec_7 <= s2_out_af;
      s3_in_uop_exceptionVec_15 <= s2_in_uop_exceptionVec_15;
      s3_in_uop_exceptionVec_23 <= s2_in_uop_exceptionVec_23;
      s3_in_uop_trigger <= s2_in_uop_trigger;
      s3_in_uop_rfWen <= s2_in_uop_rfWen;
      s3_in_uop_vpu_vstart <= _s2_out_uop_vpu_vstart_T[7:0];
      s3_in_uop_pdest <= s2_in_uop_pdest;
      s3_in_uop_robIdx_flag <= s2_in_uop_robIdx_flag;
      s3_in_uop_robIdx_value <= s2_in_uop_robIdx_value;
      s3_in_uop_debugInfo_eliminatedMove <= s2_in_uop_debugInfo_eliminatedMove;
      s3_in_uop_debugInfo_renameTime <= s2_in_uop_debugInfo_renameTime;
      s3_in_uop_debugInfo_dispatchTime <= s2_in_uop_debugInfo_dispatchTime;
      s3_in_uop_debugInfo_enqRsTime <= s2_in_uop_debugInfo_enqRsTime;
      s3_in_uop_debugInfo_selectTime <= s2_in_uop_debugInfo_selectTime;
      s3_in_uop_debugInfo_issueTime <= s2_in_uop_debugInfo_issueTime;
      s3_in_uop_debugInfo_writebackTime <= s2_in_uop_debugInfo_writebackTime;
      s3_in_uop_debugInfo_runahead_checkpoint_id <=
        s2_in_uop_debugInfo_runahead_checkpoint_id;
      s3_in_uop_debugInfo_tlbFirstReqTime <= s2_in_uop_debugInfo_tlbFirstReqTime;
      s3_in_uop_debugInfo_tlbRespTime <= s2_in_uop_debugInfo_tlbRespTime;
      s3_in_uop_sqIdx_flag <= s2_in_uop_sqIdx_flag;
      s3_in_uop_sqIdx_value <= s2_in_uop_sqIdx_value;
      s3_in_vaddr <= s2_in_vaddr;
      s3_in_fullva <= s2_in_fullva;
      s3_in_vaNeedExt <= s2_in_vaNeedExt;
      s3_in_paddr <= s2_in_paddr;
      s3_in_gpaddr <= s2_in_gpaddr;
      s3_in_mask <= s2_in_mask;
      s3_in_nc <= s2_in_nc;
      s3_in_mmio <= s2_out_mmio;
      s3_in_isForVSnonLeafPTE <= s2_in_isForVSnonLeafPTE;
      s3_in_isvec <= s2_in_isvec;
      s3_in_elemIdx <= s2_in_elemIdx;
      s3_in_mbIndex <= s2_in_mbIndex;
      s3_in_vecActive <= s2_in_vecActive;
      s3_vecFeedback <=
        s2_vecFeedback_REG & ~misalignBufferNack & s2_in_isvec & ~s2_in_isFrmMisAlignBuf;
      s3_exception <= s2_exception;
    end
    if (_prev_fire_T_4) begin
      sx_in_1_r_output_uop_exceptionVec_3 <= s3_in_uop_exceptionVec_3;
      sx_in_1_r_output_uop_exceptionVec_6 <= s3_in_uop_exceptionVec_6;
      sx_in_1_r_output_uop_exceptionVec_7 <= s3_in_uop_exceptionVec_7;
      sx_in_1_r_output_uop_exceptionVec_15 <= s3_in_uop_exceptionVec_15;
      sx_in_1_r_output_uop_exceptionVec_23 <= s3_in_uop_exceptionVec_23;
      sx_in_1_r_output_uop_trigger <= s3_in_uop_trigger;
      sx_in_1_r_output_uop_rfWen <= s3_in_uop_rfWen;
      sx_in_1_r_output_uop_vpu_vstart <= s3_in_uop_vpu_vstart;
      sx_in_1_r_output_uop_pdest <= s3_in_uop_pdest;
      sx_in_1_r_output_uop_robIdx_flag <= s3_in_uop_robIdx_flag;
      sx_in_1_r_output_uop_robIdx_value <= s3_in_uop_robIdx_value;
      sx_in_1_r_output_uop_debugInfo_eliminatedMove <= s3_in_uop_debugInfo_eliminatedMove;
      sx_in_1_r_output_uop_debugInfo_renameTime <= s3_in_uop_debugInfo_renameTime;
      sx_in_1_r_output_uop_debugInfo_dispatchTime <= s3_in_uop_debugInfo_dispatchTime;
      sx_in_1_r_output_uop_debugInfo_enqRsTime <= s3_in_uop_debugInfo_enqRsTime;
      sx_in_1_r_output_uop_debugInfo_selectTime <= s3_in_uop_debugInfo_selectTime;
      sx_in_1_r_output_uop_debugInfo_issueTime <= s3_in_uop_debugInfo_issueTime;
      sx_in_1_r_output_uop_debugInfo_writebackTime <= s3_in_uop_debugInfo_writebackTime;
      sx_in_1_r_output_uop_debugInfo_runahead_checkpoint_id <=
        s3_in_uop_debugInfo_runahead_checkpoint_id;
      sx_in_1_r_output_uop_debugInfo_tlbFirstReqTime <=
        s3_in_uop_debugInfo_tlbFirstReqTime;
      sx_in_1_r_output_uop_debugInfo_tlbRespTime <= s3_in_uop_debugInfo_tlbRespTime;
      sx_in_1_r_output_uop_sqIdx_flag <= s3_in_uop_sqIdx_flag;
      sx_in_1_r_output_uop_sqIdx_value <= s3_in_uop_sqIdx_value;
      sx_in_1_r_output_debug_isMMIO <= s3_in_mmio;
      sx_in_1_r_output_debug_isNC <= s3_in_nc;
      sx_in_1_r_output_debug_paddr <= s3_in_paddr;
      sx_in_1_r_output_debug_vaddr <= s3_in_vaddr;
      sx_in_1_r_vecFeedback <= s3_vecFeedback;
      sx_in_1_r_hasException <= s3_exception;
      sx_in_1_r_elemIdx <= s3_in_elemIdx;
      sx_in_1_r_mbIndex <= s3_in_mbIndex;
      sx_in_1_r_mask <= s3_in_mask;
      sx_in_1_r_vaddr <= s3_in_fullva;
      sx_in_1_r_vaNeedExt <= s3_in_vaNeedExt;
      sx_in_1_r_gpaddr <= s3_in_gpaddr[49:0];
      sx_in_1_r_isForVSnonLeafPTE <= s3_in_isForVSnonLeafPTE;
      sx_in_vec_1_r <= s3_in_isvec;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:355];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [8:0] i = 9'h0; i < 9'h164; i += 9'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        s0_out_uop_debugInfo_tlbFirstReqTime_c = {_RANDOM[9'h0], _RANDOM[9'h1]};
        s1_valid = _RANDOM[9'h2][0];
        s1_in_uop_exceptionVec_0 = _RANDOM[9'h4][29];
        s1_in_uop_exceptionVec_1 = _RANDOM[9'h4][30];
        s1_in_uop_exceptionVec_2 = _RANDOM[9'h4][31];
        s1_in_uop_exceptionVec_4 = _RANDOM[9'h5][1];
        s1_in_uop_exceptionVec_5 = _RANDOM[9'h5][2];
        s1_in_uop_exceptionVec_8 = _RANDOM[9'h5][5];
        s1_in_uop_exceptionVec_9 = _RANDOM[9'h5][6];
        s1_in_uop_exceptionVec_10 = _RANDOM[9'h5][7];
        s1_in_uop_exceptionVec_11 = _RANDOM[9'h5][8];
        s1_in_uop_exceptionVec_12 = _RANDOM[9'h5][9];
        s1_in_uop_exceptionVec_13 = _RANDOM[9'h5][10];
        s1_in_uop_exceptionVec_14 = _RANDOM[9'h5][11];
        s1_in_uop_exceptionVec_16 = _RANDOM[9'h5][13];
        s1_in_uop_exceptionVec_17 = _RANDOM[9'h5][14];
        s1_in_uop_exceptionVec_18 = _RANDOM[9'h5][15];
        s1_in_uop_exceptionVec_19 = _RANDOM[9'h5][16];
        s1_in_uop_exceptionVec_20 = _RANDOM[9'h5][17];
        s1_in_uop_exceptionVec_21 = _RANDOM[9'h5][18];
        s1_in_uop_exceptionVec_22 = _RANDOM[9'h5][19];
        s1_in_uop_ftqPtr_flag = _RANDOM[9'h6][3];
        s1_in_uop_ftqPtr_value = _RANDOM[9'h6][9:4];
        s1_in_uop_ftqOffset = _RANDOM[9'h6][13:10];
        s1_in_uop_fuType = {_RANDOM[9'h7][31:8], _RANDOM[9'h8][10:0]};
        s1_in_uop_fuOpType = _RANDOM[9'h8][19:11];
        s1_in_uop_rfWen = _RANDOM[9'h8][20];
        s1_in_uop_vpu_vstart = {_RANDOM[9'hA][31:29], _RANDOM[9'hB][4:0]};
        s1_in_uop_vpu_nf = _RANDOM[9'h10][3:1];
        s1_in_uop_vpu_veew = _RANDOM[9'h10][5:4];
        s1_in_uop_uopIdx = _RANDOM[9'h10][25:19];
        s1_in_uop_pdest = {_RANDOM[9'h13][31:25], _RANDOM[9'h14][0]};
        s1_in_uop_robIdx_flag = _RANDOM[9'h14][13];
        s1_in_uop_robIdx_value = _RANDOM[9'h14][21:14];
        s1_in_uop_debugInfo_eliminatedMove = _RANDOM[9'h15][6];
        s1_in_uop_debugInfo_renameTime =
          {_RANDOM[9'h15][31:7], _RANDOM[9'h16], _RANDOM[9'h17][6:0]};
        s1_in_uop_debugInfo_dispatchTime =
          {_RANDOM[9'h17][31:7], _RANDOM[9'h18], _RANDOM[9'h19][6:0]};
        s1_in_uop_debugInfo_enqRsTime =
          {_RANDOM[9'h19][31:7], _RANDOM[9'h1A], _RANDOM[9'h1B][6:0]};
        s1_in_uop_debugInfo_selectTime =
          {_RANDOM[9'h1B][31:7], _RANDOM[9'h1C], _RANDOM[9'h1D][6:0]};
        s1_in_uop_debugInfo_issueTime =
          {_RANDOM[9'h1D][31:7], _RANDOM[9'h1E], _RANDOM[9'h1F][6:0]};
        s1_in_uop_debugInfo_writebackTime =
          {_RANDOM[9'h1F][31:7], _RANDOM[9'h20], _RANDOM[9'h21][6:0]};
        s1_in_uop_debugInfo_runahead_checkpoint_id =
          {_RANDOM[9'h21][31:7], _RANDOM[9'h22], _RANDOM[9'h23][6:0]};
        s1_in_uop_debugInfo_tlbFirstReqTime =
          {_RANDOM[9'h23][31:7], _RANDOM[9'h24], _RANDOM[9'h25][6:0]};
        s1_in_uop_debugInfo_tlbRespTime =
          {_RANDOM[9'h25][31:7], _RANDOM[9'h26], _RANDOM[9'h27][6:0]};
        s1_in_uop_lqIdx_flag = _RANDOM[9'h27][24];
        s1_in_uop_lqIdx_value = _RANDOM[9'h27][31:25];
        s1_in_uop_sqIdx_flag = _RANDOM[9'h28][0];
        s1_in_uop_sqIdx_value = _RANDOM[9'h28][6:1];
        s1_in_vaddr = {_RANDOM[9'h29][31:17], _RANDOM[9'h2A], _RANDOM[9'h2B][2:0]};
        s1_in_mask = {_RANDOM[9'h30][31:20], _RANDOM[9'h31][3:0]};
        s1_in_wlineflag = _RANDOM[9'h35][5];
        s1_in_isvec = _RANDOM[9'h3A][6];
        s1_in_is128bit = _RANDOM[9'h3A][8];
        s1_in_elemIdx = _RANDOM[9'h3A][18:11];
        s1_in_alignedType = _RANDOM[9'h3A][21:19];
        s1_in_mbIndex = _RANDOM[9'h3A][25:22];
        s1_in_vecBaseVaddr = {_RANDOM[9'h3B][31:7], _RANDOM[9'h3C][24:0]};
        s1_in_vecActive = _RANDOM[9'h3E][27];
        s1_in_isFirstIssue = _RANDOM[9'h3F][4];
        s1_in_isFrmMisAlignBuf = _RANDOM[9'h3F][26];
        s1_in_isMisalign = _RANDOM[9'h3F][27];
        s1_in_isFinalSplit = _RANDOM[9'h3F][28];
        s1_in_misalignWith16Byte = _RANDOM[9'h3F][29];
        s1_vecActive = _RANDOM[9'h40][0];
        s1_isCbo = _RANDOM[9'h40][1];
        s1_isvec = _RANDOM[9'h40][2];
        s1_frm_mab_vec = _RANDOM[9'h40][3];
        io_issue_bits_r_uop_robIdx_flag = _RANDOM[9'h52][16];
        io_issue_bits_r_uop_robIdx_value = _RANDOM[9'h52][24:17];
        s1_out_uop_debugInfo_tlbRespTime_c =
          {_RANDOM[9'h6D][31:26], _RANDOM[9'h6E], _RANDOM[9'h6F][25:0]};
        s1_mis_align_last_REG = _RANDOM[9'h6F][26];
        s2_valid = _RANDOM[9'h6F][27];
        s2_in_uop_exceptionVec_0 = _RANDOM[9'h72][24];
        s2_in_uop_exceptionVec_1 = _RANDOM[9'h72][25];
        s2_in_uop_exceptionVec_2 = _RANDOM[9'h72][26];
        s2_in_uop_exceptionVec_3 = _RANDOM[9'h72][27];
        s2_in_uop_exceptionVec_4 = _RANDOM[9'h72][28];
        s2_in_uop_exceptionVec_5 = _RANDOM[9'h72][29];
        s2_in_uop_exceptionVec_7 = _RANDOM[9'h72][31];
        s2_in_uop_exceptionVec_8 = _RANDOM[9'h73][0];
        s2_in_uop_exceptionVec_9 = _RANDOM[9'h73][1];
        s2_in_uop_exceptionVec_10 = _RANDOM[9'h73][2];
        s2_in_uop_exceptionVec_11 = _RANDOM[9'h73][3];
        s2_in_uop_exceptionVec_12 = _RANDOM[9'h73][4];
        s2_in_uop_exceptionVec_13 = _RANDOM[9'h73][5];
        s2_in_uop_exceptionVec_14 = _RANDOM[9'h73][6];
        s2_in_uop_exceptionVec_15 = _RANDOM[9'h73][7];
        s2_in_uop_exceptionVec_16 = _RANDOM[9'h73][8];
        s2_in_uop_exceptionVec_17 = _RANDOM[9'h73][9];
        s2_in_uop_exceptionVec_18 = _RANDOM[9'h73][10];
        s2_in_uop_exceptionVec_19 = _RANDOM[9'h73][11];
        s2_in_uop_exceptionVec_20 = _RANDOM[9'h73][12];
        s2_in_uop_exceptionVec_21 = _RANDOM[9'h73][13];
        s2_in_uop_exceptionVec_22 = _RANDOM[9'h73][14];
        s2_in_uop_exceptionVec_23 = _RANDOM[9'h73][15];
        s2_in_uop_trigger = _RANDOM[9'h73][21:18];
        s2_in_uop_ftqPtr_flag = _RANDOM[9'h73][30];
        s2_in_uop_ftqPtr_value = {_RANDOM[9'h73][31], _RANDOM[9'h74][4:0]};
        s2_in_uop_ftqOffset = _RANDOM[9'h74][8:5];
        s2_in_uop_fuType = {_RANDOM[9'h75][31:3], _RANDOM[9'h76][5:0]};
        s2_in_uop_fuOpType = _RANDOM[9'h76][14:6];
        s2_in_uop_rfWen = _RANDOM[9'h76][15];
        s2_in_uop_vpu_vstart = _RANDOM[9'h78][31:24];
        s2_in_uop_vpu_nf = _RANDOM[9'h7D][30:28];
        s2_in_uop_vpu_veew = {_RANDOM[9'h7D][31], _RANDOM[9'h7E][0]};
        s2_in_uop_uopIdx = _RANDOM[9'h7E][20:14];
        s2_in_uop_pdest = _RANDOM[9'h81][27:20];
        s2_in_uop_robIdx_flag = _RANDOM[9'h82][8];
        s2_in_uop_robIdx_value = _RANDOM[9'h82][16:9];
        s2_in_uop_debugInfo_eliminatedMove = _RANDOM[9'h83][1];
        s2_in_uop_debugInfo_renameTime =
          {_RANDOM[9'h83][31:2], _RANDOM[9'h84], _RANDOM[9'h85][1:0]};
        s2_in_uop_debugInfo_dispatchTime =
          {_RANDOM[9'h85][31:2], _RANDOM[9'h86], _RANDOM[9'h87][1:0]};
        s2_in_uop_debugInfo_enqRsTime =
          {_RANDOM[9'h87][31:2], _RANDOM[9'h88], _RANDOM[9'h89][1:0]};
        s2_in_uop_debugInfo_selectTime =
          {_RANDOM[9'h89][31:2], _RANDOM[9'h8A], _RANDOM[9'h8B][1:0]};
        s2_in_uop_debugInfo_issueTime =
          {_RANDOM[9'h8B][31:2], _RANDOM[9'h8C], _RANDOM[9'h8D][1:0]};
        s2_in_uop_debugInfo_writebackTime =
          {_RANDOM[9'h8D][31:2], _RANDOM[9'h8E], _RANDOM[9'h8F][1:0]};
        s2_in_uop_debugInfo_runahead_checkpoint_id =
          {_RANDOM[9'h8F][31:2], _RANDOM[9'h90], _RANDOM[9'h91][1:0]};
        s2_in_uop_debugInfo_tlbFirstReqTime =
          {_RANDOM[9'h91][31:2], _RANDOM[9'h92], _RANDOM[9'h93][1:0]};
        s2_in_uop_debugInfo_tlbRespTime =
          {_RANDOM[9'h93][31:2], _RANDOM[9'h94], _RANDOM[9'h95][1:0]};
        s2_in_uop_lqIdx_flag = _RANDOM[9'h95][19];
        s2_in_uop_lqIdx_value = _RANDOM[9'h95][26:20];
        s2_in_uop_sqIdx_flag = _RANDOM[9'h95][27];
        s2_in_uop_sqIdx_value = {_RANDOM[9'h95][31:28], _RANDOM[9'h96][1:0]};
        s2_in_vaddr = {_RANDOM[9'h97][31:12], _RANDOM[9'h98][29:0]};
        s2_in_fullva = {_RANDOM[9'h98][31:30], _RANDOM[9'h99], _RANDOM[9'h9A][29:0]};
        s2_in_vaNeedExt = _RANDOM[9'h9A][30];
        s2_in_paddr = {_RANDOM[9'h9A][31], _RANDOM[9'h9B], _RANDOM[9'h9C][14:0]};
        s2_in_gpaddr = {_RANDOM[9'h9C][31:15], _RANDOM[9'h9D], _RANDOM[9'h9E][14:0]};
        s2_in_mask = _RANDOM[9'h9E][30:15];
        s2_in_nc = _RANDOM[9'hA3][5];
        s2_in_mmio = _RANDOM[9'hA3][6];
        s2_in_atomic = _RANDOM[9'hA3][8];
        s2_in_isHyper = _RANDOM[9'hA3][10];
        s2_in_isForVSnonLeafPTE = _RANDOM[9'hA3][11];
        s2_in_isvec = _RANDOM[9'hA8][1];
        s2_in_elemIdx = _RANDOM[9'hA8][13:6];
        s2_in_alignedType = _RANDOM[9'hA8][16:14];
        s2_in_mbIndex = _RANDOM[9'hA8][20:17];
        s2_in_vecVaddrOffset =
          {_RANDOM[9'hAA][31:20], _RANDOM[9'hAB], _RANDOM[9'hAC][5:0]};
        s2_in_vecActive = _RANDOM[9'hAC][22];
        s2_in_isFrmMisAlignBuf = _RANDOM[9'hAD][21];
        s2_in_isMisalign = _RANDOM[9'hAD][22];
        s2_in_isFinalSplit = _RANDOM[9'hAD][23];
        s2_vecActive = _RANDOM[9'hAD][27];
        s2_frm_mab_vec = _RANDOM[9'hAD][28];
        s2_pbmt = _RANDOM[9'hAD][30:29];
        s2_trigger_debug_mode = _RANDOM[9'hAD][31];
        s2_exception_REG = _RANDOM[9'hAE][0];
        s2_un_misalign_exception_REG = _RANDOM[9'hAE][1];
        s2_mmio_REG = _RANDOM[9'hAE][2];
        s2_actually_uncache_REG = _RANDOM[9'hAE][3];
        s2_isCbo = _RANDOM[9'hAE][4];
        s2_out_uop_exceptionVec_7_REG = _RANDOM[9'hAE][5];
        s2_mis_align_r = _RANDOM[9'hAE][6];
        toMisalignBufferValid_last_REG = _RANDOM[9'hAE][7];
        io_feedback_slow_valid_last_REG = _RANDOM[9'hAE][8];
        io_feedback_slow_bits_r_robIdx_flag = _RANDOM[9'hAE][9];
        io_feedback_slow_bits_r_robIdx_value = _RANDOM[9'hAE][17:10];
        io_feedback_slow_bits_r_flushState = _RANDOM[9'hAE][19];
        io_feedback_slow_bits_r_sqIdx_flag = _RANDOM[9'hAE][31];
        io_feedback_slow_bits_r_sqIdx_value = _RANDOM[9'hAF][5:0];
        io_feedback_slow_bits_r_lqIdx_flag = _RANDOM[9'hAF][6];
        io_feedback_slow_bits_r_lqIdx_value = _RANDOM[9'hAF][13:7];
        io_feedback_slow_bits_hit_r = _RANDOM[9'hAF][14];
        s2_vecFeedback_REG = _RANDOM[9'hAF][15];
        s2_misalign_stout_bits_need_rep_r = _RANDOM[9'hAF][16];
        s3_valid = _RANDOM[9'hED][17];
        s3_in_uop_exceptionVec_3 = _RANDOM[9'hF0][17];
        s3_in_uop_exceptionVec_6 = _RANDOM[9'hF0][20];
        s3_in_uop_exceptionVec_7 = _RANDOM[9'hF0][21];
        s3_in_uop_exceptionVec_15 = _RANDOM[9'hF0][29];
        s3_in_uop_exceptionVec_23 = _RANDOM[9'hF1][5];
        s3_in_uop_trigger = _RANDOM[9'hF1][11:8];
        s3_in_uop_rfWen = _RANDOM[9'hF4][5];
        s3_in_uop_vpu_vstart = _RANDOM[9'hF6][21:14];
        s3_in_uop_pdest = _RANDOM[9'hFF][17:10];
        s3_in_uop_robIdx_flag = _RANDOM[9'hFF][30];
        s3_in_uop_robIdx_value = {_RANDOM[9'hFF][31], _RANDOM[9'h100][6:0]};
        s3_in_uop_debugInfo_eliminatedMove = _RANDOM[9'h100][23];
        s3_in_uop_debugInfo_renameTime =
          {_RANDOM[9'h100][31:24], _RANDOM[9'h101], _RANDOM[9'h102][23:0]};
        s3_in_uop_debugInfo_dispatchTime =
          {_RANDOM[9'h102][31:24], _RANDOM[9'h103], _RANDOM[9'h104][23:0]};
        s3_in_uop_debugInfo_enqRsTime =
          {_RANDOM[9'h104][31:24], _RANDOM[9'h105], _RANDOM[9'h106][23:0]};
        s3_in_uop_debugInfo_selectTime =
          {_RANDOM[9'h106][31:24], _RANDOM[9'h107], _RANDOM[9'h108][23:0]};
        s3_in_uop_debugInfo_issueTime =
          {_RANDOM[9'h108][31:24], _RANDOM[9'h109], _RANDOM[9'h10A][23:0]};
        s3_in_uop_debugInfo_writebackTime =
          {_RANDOM[9'h10A][31:24], _RANDOM[9'h10B], _RANDOM[9'h10C][23:0]};
        s3_in_uop_debugInfo_runahead_checkpoint_id =
          {_RANDOM[9'h10C][31:24], _RANDOM[9'h10D], _RANDOM[9'h10E][23:0]};
        s3_in_uop_debugInfo_tlbFirstReqTime =
          {_RANDOM[9'h10E][31:24], _RANDOM[9'h10F], _RANDOM[9'h110][23:0]};
        s3_in_uop_debugInfo_tlbRespTime =
          {_RANDOM[9'h110][31:24], _RANDOM[9'h111], _RANDOM[9'h112][23:0]};
        s3_in_uop_sqIdx_flag = _RANDOM[9'h113][17];
        s3_in_uop_sqIdx_value = _RANDOM[9'h113][23:18];
        s3_in_vaddr = {_RANDOM[9'h115][31:2], _RANDOM[9'h116][19:0]};
        s3_in_fullva = {_RANDOM[9'h116][31:20], _RANDOM[9'h117], _RANDOM[9'h118][19:0]};
        s3_in_vaNeedExt = _RANDOM[9'h118][20];
        s3_in_paddr = {_RANDOM[9'h118][31:21], _RANDOM[9'h119], _RANDOM[9'h11A][4:0]};
        s3_in_gpaddr = {_RANDOM[9'h11A][31:5], _RANDOM[9'h11B], _RANDOM[9'h11C][4:0]};
        s3_in_mask = _RANDOM[9'h11C][20:5];
        s3_in_nc = _RANDOM[9'h120][27];
        s3_in_mmio = _RANDOM[9'h120][28];
        s3_in_isForVSnonLeafPTE = _RANDOM[9'h121][1];
        s3_in_isvec = _RANDOM[9'h125][23];
        s3_in_elemIdx = {_RANDOM[9'h125][31:28], _RANDOM[9'h126][3:0]};
        s3_in_mbIndex = _RANDOM[9'h126][10:7];
        s3_in_vecActive = _RANDOM[9'h12A][12];
        s3_vecFeedback = _RANDOM[9'h12B][17];
        s3_exception = _RANDOM[9'h12B][18];
        sx_valid_1_r = _RANDOM[9'h12B][19];
        sx_in_1_r_output_uop_exceptionVec_3 = _RANDOM[9'h12E][19];
        sx_in_1_r_output_uop_exceptionVec_6 = _RANDOM[9'h12E][22];
        sx_in_1_r_output_uop_exceptionVec_7 = _RANDOM[9'h12E][23];
        sx_in_1_r_output_uop_exceptionVec_15 = _RANDOM[9'h12E][31];
        sx_in_1_r_output_uop_exceptionVec_23 = _RANDOM[9'h12F][7];
        sx_in_1_r_output_uop_trigger = _RANDOM[9'h12F][13:10];
        sx_in_1_r_output_uop_rfWen = _RANDOM[9'h132][7];
        sx_in_1_r_output_uop_vpu_vstart = _RANDOM[9'h134][23:16];
        sx_in_1_r_output_uop_pdest = _RANDOM[9'h13D][19:12];
        sx_in_1_r_output_uop_robIdx_flag = _RANDOM[9'h13E][0];
        sx_in_1_r_output_uop_robIdx_value = _RANDOM[9'h13E][8:1];
        sx_in_1_r_output_uop_debugInfo_eliminatedMove = _RANDOM[9'h13E][25];
        sx_in_1_r_output_uop_debugInfo_renameTime =
          {_RANDOM[9'h13E][31:26], _RANDOM[9'h13F], _RANDOM[9'h140][25:0]};
        sx_in_1_r_output_uop_debugInfo_dispatchTime =
          {_RANDOM[9'h140][31:26], _RANDOM[9'h141], _RANDOM[9'h142][25:0]};
        sx_in_1_r_output_uop_debugInfo_enqRsTime =
          {_RANDOM[9'h142][31:26], _RANDOM[9'h143], _RANDOM[9'h144][25:0]};
        sx_in_1_r_output_uop_debugInfo_selectTime =
          {_RANDOM[9'h144][31:26], _RANDOM[9'h145], _RANDOM[9'h146][25:0]};
        sx_in_1_r_output_uop_debugInfo_issueTime =
          {_RANDOM[9'h146][31:26], _RANDOM[9'h147], _RANDOM[9'h148][25:0]};
        sx_in_1_r_output_uop_debugInfo_writebackTime =
          {_RANDOM[9'h148][31:26], _RANDOM[9'h149], _RANDOM[9'h14A][25:0]};
        sx_in_1_r_output_uop_debugInfo_runahead_checkpoint_id =
          {_RANDOM[9'h14A][31:26], _RANDOM[9'h14B], _RANDOM[9'h14C][25:0]};
        sx_in_1_r_output_uop_debugInfo_tlbFirstReqTime =
          {_RANDOM[9'h14C][31:26], _RANDOM[9'h14D], _RANDOM[9'h14E][25:0]};
        sx_in_1_r_output_uop_debugInfo_tlbRespTime =
          {_RANDOM[9'h14E][31:26], _RANDOM[9'h14F], _RANDOM[9'h150][25:0]};
        sx_in_1_r_output_uop_sqIdx_flag = _RANDOM[9'h151][19];
        sx_in_1_r_output_uop_sqIdx_value = _RANDOM[9'h151][25:20];
        sx_in_1_r_output_debug_isMMIO = _RANDOM[9'h15B][11];
        sx_in_1_r_output_debug_isNC = _RANDOM[9'h15B][12];
        sx_in_1_r_output_debug_paddr = {_RANDOM[9'h15B][31:14], _RANDOM[9'h15C][29:0]};
        sx_in_1_r_output_debug_vaddr =
          {_RANDOM[9'h15C][31:30], _RANDOM[9'h15D], _RANDOM[9'h15E][15:0]};
        sx_in_1_r_vecFeedback = _RANDOM[9'h15E][16];
        sx_in_1_r_hasException = _RANDOM[9'h15E][20];
        sx_in_1_r_elemIdx = _RANDOM[9'h15E][28:21];
        sx_in_1_r_mbIndex = _RANDOM[9'h15F][3:0];
        sx_in_1_r_mask = _RANDOM[9'h15F][19:4];
        sx_in_1_r_vaddr =
          {_RANDOM[9'h15F][31:20], _RANDOM[9'h160], _RANDOM[9'h161][19:0]};
        sx_in_1_r_vaNeedExt = _RANDOM[9'h161][20];
        sx_in_1_r_gpaddr =
          {_RANDOM[9'h161][31:21], _RANDOM[9'h162], _RANDOM[9'h163][6:0]};
        sx_in_1_r_isForVSnonLeafPTE = _RANDOM[9'h163][7];
        sx_in_vec_1_r = _RANDOM[9'h163][24];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        s0_out_uop_debugInfo_tlbFirstReqTime_c = 64'h0;
        s1_valid = 1'h0;
        s1_vecActive = 1'h1;
        s1_isvec = 1'h0;
        s1_frm_mab_vec = 1'h0;
        s1_out_uop_debugInfo_tlbRespTime_c = 64'h0;
        s1_mis_align_last_REG = 1'h0;
        s2_valid = 1'h0;
        s2_vecActive = 1'h1;
        s2_frm_mab_vec = 1'h1;
        s2_trigger_debug_mode = 1'h0;
        toMisalignBufferValid_last_REG = 1'h0;
        io_feedback_slow_valid_last_REG = 1'h0;
        s3_valid = 1'h0;
        sx_valid_1_r = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  MemTrigger_3 storeTrigger (
    .tdataVec_io_fromCsrTrigger_tdataVec_0_matchType
      (io_fromCsrTrigger_tdataVec_0_matchType),
    .tdataVec_io_fromCsrTrigger_tdataVec_0_select
      (io_fromCsrTrigger_tdataVec_0_select),
    .tdataVec_io_fromCsrTrigger_tdataVec_0_timing
      (io_fromCsrTrigger_tdataVec_0_timing),
    .tdataVec_io_fromCsrTrigger_tdataVec_0_action
      (io_fromCsrTrigger_tdataVec_0_action),
    .tdataVec_io_fromCsrTrigger_tdataVec_0_chain     (io_fromCsrTrigger_tdataVec_0_chain),
    .tdataVec_io_fromCsrTrigger_tdataVec_0_store     (io_fromCsrTrigger_tdataVec_0_store),
    .tdataVec_io_fromCsrTrigger_tdataVec_0_tdata2
      (io_fromCsrTrigger_tdataVec_0_tdata2),
    .tdataVec_io_fromCsrTrigger_tdataVec_1_matchType
      (io_fromCsrTrigger_tdataVec_1_matchType),
    .tdataVec_io_fromCsrTrigger_tdataVec_1_select
      (io_fromCsrTrigger_tdataVec_1_select),
    .tdataVec_io_fromCsrTrigger_tdataVec_1_timing
      (io_fromCsrTrigger_tdataVec_1_timing),
    .tdataVec_io_fromCsrTrigger_tdataVec_1_action
      (io_fromCsrTrigger_tdataVec_1_action),
    .tdataVec_io_fromCsrTrigger_tdataVec_1_chain     (io_fromCsrTrigger_tdataVec_1_chain),
    .tdataVec_io_fromCsrTrigger_tdataVec_1_store     (io_fromCsrTrigger_tdataVec_1_store),
    .tdataVec_io_fromCsrTrigger_tdataVec_1_tdata2
      (io_fromCsrTrigger_tdataVec_1_tdata2),
    .tdataVec_io_fromCsrTrigger_tdataVec_2_matchType
      (io_fromCsrTrigger_tdataVec_2_matchType),
    .tdataVec_io_fromCsrTrigger_tdataVec_2_select
      (io_fromCsrTrigger_tdataVec_2_select),
    .tdataVec_io_fromCsrTrigger_tdataVec_2_timing
      (io_fromCsrTrigger_tdataVec_2_timing),
    .tdataVec_io_fromCsrTrigger_tdataVec_2_action
      (io_fromCsrTrigger_tdataVec_2_action),
    .tdataVec_io_fromCsrTrigger_tdataVec_2_chain     (io_fromCsrTrigger_tdataVec_2_chain),
    .tdataVec_io_fromCsrTrigger_tdataVec_2_store     (io_fromCsrTrigger_tdataVec_2_store),
    .tdataVec_io_fromCsrTrigger_tdataVec_2_tdata2
      (io_fromCsrTrigger_tdataVec_2_tdata2),
    .tdataVec_io_fromCsrTrigger_tdataVec_3_matchType
      (io_fromCsrTrigger_tdataVec_3_matchType),
    .tdataVec_io_fromCsrTrigger_tdataVec_3_select
      (io_fromCsrTrigger_tdataVec_3_select),
    .tdataVec_io_fromCsrTrigger_tdataVec_3_timing
      (io_fromCsrTrigger_tdataVec_3_timing),
    .tdataVec_io_fromCsrTrigger_tdataVec_3_action
      (io_fromCsrTrigger_tdataVec_3_action),
    .tdataVec_io_fromCsrTrigger_tdataVec_3_chain     (io_fromCsrTrigger_tdataVec_3_chain),
    .tdataVec_io_fromCsrTrigger_tdataVec_3_store     (io_fromCsrTrigger_tdataVec_3_store),
    .tdataVec_io_fromCsrTrigger_tdataVec_3_tdata2
      (io_fromCsrTrigger_tdataVec_3_tdata2),
    .tdataVec_io_fromCsrTrigger_tEnableVec_0         (io_fromCsrTrigger_tEnableVec_0),
    .tdataVec_io_fromCsrTrigger_tEnableVec_1         (io_fromCsrTrigger_tEnableVec_1),
    .tdataVec_io_fromCsrTrigger_tEnableVec_2         (io_fromCsrTrigger_tEnableVec_2),
    .tdataVec_io_fromCsrTrigger_tEnableVec_3         (io_fromCsrTrigger_tEnableVec_3),
    .tdataVec_io_fromCsrTrigger_debugMode            (io_fromCsrTrigger_debugMode),
    .tdataVec_io_fromCsrTrigger_triggerCanRaiseBpExp
      (io_fromCsrTrigger_triggerCanRaiseBpExp),
    .tdataVec_io_fromLoadStore_vaddr                 (s1_in_vaddr),
    .tdataVec_io_fromLoadStore_isVectorUnitStride    (s1_in_isvec & s1_in_is128bit),
    .tdataVec_io_fromLoadStore_mask                  (s1_in_mask),
    .tdataVec_io_toLoadStore_triggerAction
      (_storeTrigger_tdataVec_io_toLoadStore_triggerAction),
    .tdataVec_io_toLoadStore_triggerVaddr
      (_storeTrigger_tdataVec_io_toLoadStore_triggerVaddr),
    .tdataVec_io_isCbo                               (s1_isCbo)
  );
  assign io_stin_ready = io_stin_ready_0;
  assign io_issue_valid = s1_valid & ~s1_tlb_miss & ~s1_isvec & ~s1_in_isFrmMisAlignBuf;
  assign io_issue_bits_uop_robIdx_flag = io_issue_bits_r_uop_robIdx_flag;
  assign io_issue_bits_uop_robIdx_value = io_issue_bits_r_uop_robIdx_value;
  assign io_misalign_stin_ready = io_misalign_stin_valid;
  assign io_misalign_stout_valid = s2_valid & s2_in_isFrmMisAlignBuf;
  assign io_misalign_stout_bits_uop_exceptionVec_3 = s2_in_uop_exceptionVec_3;
  assign io_misalign_stout_bits_uop_exceptionVec_6 = s2_exception_new_vec_6;
  assign io_misalign_stout_bits_uop_exceptionVec_7 = s2_out_af;
  assign io_misalign_stout_bits_uop_exceptionVec_15 = s2_in_uop_exceptionVec_15;
  assign io_misalign_stout_bits_uop_exceptionVec_23 = s2_in_uop_exceptionVec_23;
  assign io_misalign_stout_bits_uop_trigger = s2_in_uop_trigger;
  assign io_misalign_stout_bits_paddr = s2_in_paddr;
  assign io_misalign_stout_bits_mmio = s2_out_mmio;
  assign io_misalign_stout_bits_vecActive = s2_in_vecActive;
  assign io_misalign_stout_bits_need_rep = s2_misalign_stout_bits_need_rep_r;
  assign io_tlb_req_valid = s0_valid_probe;
  assign io_tlb_req_bits_vaddr = s0_vaddr;
  assign io_tlb_req_bits_fullva =
    io_stin_ready_0
      ? 64'(s0_stin_src_0 + {{52{s0_stin_uop_imm[11]}}, s0_stin_uop_imm})
      : s0_out_isvec
          ? io_vecstin_bits_vaddr
          : {14'h0, io_misalign_stin_valid ? io_misalign_stin_bits_vaddr : _s0_vaddr_T_1};
  assign io_tlb_req_bits_checkfullva = io_st_mask_out_valid_0;
  assign io_tlb_req_bits_hyperinst =
    s0_uop_fuOpType[4] & ~(s0_uop_fuOpType[5]) & s0_uop_fuOpType[8:7] == 2'h0;
  assign io_tlb_req_bits_memidx_idx =
    {1'h0, s0_use_non_prf_flow ? s0_uop_sqIdx_value : 6'h0};
  assign io_tlb_req_bits_debug_robIdx_flag = s0_use_non_prf_flow & s0_uop_robIdx_flag;
  assign io_tlb_req_bits_debug_robIdx_value =
    s0_use_non_prf_flow ? s0_uop_robIdx_value : 8'h0;
  assign io_tlb_req_bits_debug_isFirstIssue = s0_isFirstIssue;
  assign io_dcache_req_valid = _s0_fire_T_1_probe;
  assign io_lsq_valid = s1_valid;
  assign io_lsq_bits_uop_exceptionVec_0 = s1_in_uop_exceptionVec_0;
  assign io_lsq_bits_uop_exceptionVec_1 = s1_in_uop_exceptionVec_1;
  assign io_lsq_bits_uop_exceptionVec_2 = s1_in_uop_exceptionVec_2;
  assign io_lsq_bits_uop_exceptionVec_3 =
    ~(|_storeTrigger_tdataVec_io_toLoadStore_triggerAction);
  assign io_lsq_bits_uop_exceptionVec_4 = s1_in_uop_exceptionVec_4;
  assign io_lsq_bits_uop_exceptionVec_5 = s1_in_uop_exceptionVec_5;
  assign io_lsq_bits_uop_exceptionVec_6 = s1_exception_new_vec_6;
  assign io_lsq_bits_uop_exceptionVec_7 = s1_exception_new_vec_7;
  assign io_lsq_bits_uop_exceptionVec_8 = s1_in_uop_exceptionVec_8;
  assign io_lsq_bits_uop_exceptionVec_9 = s1_in_uop_exceptionVec_9;
  assign io_lsq_bits_uop_exceptionVec_10 = s1_in_uop_exceptionVec_10;
  assign io_lsq_bits_uop_exceptionVec_11 = s1_in_uop_exceptionVec_11;
  assign io_lsq_bits_uop_exceptionVec_12 = s1_in_uop_exceptionVec_12;
  assign io_lsq_bits_uop_exceptionVec_13 = s1_in_uop_exceptionVec_13;
  assign io_lsq_bits_uop_exceptionVec_14 = s1_in_uop_exceptionVec_14;
  assign io_lsq_bits_uop_exceptionVec_15 = s1_exception_new_vec_15;
  assign io_lsq_bits_uop_exceptionVec_16 = s1_in_uop_exceptionVec_16;
  assign io_lsq_bits_uop_exceptionVec_17 = s1_in_uop_exceptionVec_17;
  assign io_lsq_bits_uop_exceptionVec_18 = s1_in_uop_exceptionVec_18;
  assign io_lsq_bits_uop_exceptionVec_19 = s1_in_uop_exceptionVec_19;
  assign io_lsq_bits_uop_exceptionVec_20 = s1_in_uop_exceptionVec_20;
  assign io_lsq_bits_uop_exceptionVec_21 = s1_in_uop_exceptionVec_21;
  assign io_lsq_bits_uop_exceptionVec_22 = s1_in_uop_exceptionVec_22;
  assign io_lsq_bits_uop_exceptionVec_23 = s1_exception_new_vec_23;
  assign io_lsq_bits_uop_trigger = _storeTrigger_tdataVec_io_toLoadStore_triggerAction;
  assign io_lsq_bits_uop_ftqPtr_flag = s1_in_uop_ftqPtr_flag;
  assign io_lsq_bits_uop_ftqPtr_value = s1_in_uop_ftqPtr_value;
  assign io_lsq_bits_uop_ftqOffset = s1_in_uop_ftqOffset;
  assign io_lsq_bits_uop_fuType = s1_in_uop_fuType;
  assign io_lsq_bits_uop_fuOpType = s1_in_uop_fuOpType;
  assign io_lsq_bits_uop_rfWen = s1_in_uop_rfWen;
  assign io_lsq_bits_uop_vpu_nf = s1_in_uop_vpu_nf;
  assign io_lsq_bits_uop_vpu_veew = s1_in_uop_vpu_veew;
  assign io_lsq_bits_uop_uopIdx = s1_in_uop_uopIdx;
  assign io_lsq_bits_uop_pdest = s1_in_uop_pdest;
  assign io_lsq_bits_uop_robIdx_flag = s1_in_uop_robIdx_flag;
  assign io_lsq_bits_uop_robIdx_value = s1_in_uop_robIdx_value;
  assign io_lsq_bits_uop_debugInfo_eliminatedMove = s1_in_uop_debugInfo_eliminatedMove;
  assign io_lsq_bits_uop_debugInfo_renameTime = s1_in_uop_debugInfo_renameTime;
  assign io_lsq_bits_uop_debugInfo_dispatchTime = s1_in_uop_debugInfo_dispatchTime;
  assign io_lsq_bits_uop_debugInfo_enqRsTime = s1_in_uop_debugInfo_enqRsTime;
  assign io_lsq_bits_uop_debugInfo_selectTime = s1_in_uop_debugInfo_selectTime;
  assign io_lsq_bits_uop_debugInfo_issueTime = s1_in_uop_debugInfo_issueTime;
  assign io_lsq_bits_uop_debugInfo_writebackTime = s1_in_uop_debugInfo_writebackTime;
  assign io_lsq_bits_uop_debugInfo_runahead_checkpoint_id =
    s1_in_uop_debugInfo_runahead_checkpoint_id;
  assign io_lsq_bits_uop_debugInfo_tlbFirstReqTime = s1_in_uop_debugInfo_tlbFirstReqTime;
  assign io_lsq_bits_uop_debugInfo_tlbRespTime = s1_out_uop_debugInfo_tlbRespTime;
  assign io_lsq_bits_uop_sqIdx_flag = s1_in_uop_sqIdx_flag;
  assign io_lsq_bits_uop_sqIdx_value = s1_in_uop_sqIdx_value;
  assign io_lsq_bits_vaddr = s1_in_vaddr;
  assign io_lsq_bits_fullva = io_tlb_resp_bits_fullva;
  assign io_lsq_bits_vaNeedExt = io_tlb_resp_bits_excp_0_vaNeedExt;
  assign io_lsq_bits_paddr = io_tlb_resp_bits_paddr_0;
  assign io_lsq_bits_gpaddr = io_tlb_resp_bits_gpaddr_0;
  assign io_lsq_bits_mask = s1_in_mask;
  assign io_lsq_bits_wlineflag = s1_in_wlineflag;
  assign io_lsq_bits_miss = s1_tlb_miss;
  assign io_lsq_bits_nc = s1_out_nc;
  assign io_lsq_bits_isHyper = io_tlb_resp_bits_excp_0_isHyper;
  assign io_lsq_bits_isForVSnonLeafPTE = io_tlb_resp_bits_isForVSnonLeafPTE;
  assign io_lsq_bits_isvec = s1_in_isvec | s1_frm_mab_vec;
  assign io_lsq_bits_isFrmMisAlignBuf = s1_in_isFrmMisAlignBuf;
  assign io_lsq_bits_isMisalign = s1_in_isMisalign;
  assign io_lsq_bits_misalignWith16Byte = s1_in_misalignWith16Byte;
  assign io_lsq_bits_updateAddrValid =
    (~s1_in_isMisalign | s1_in_misalignWith16Byte)
    & (~s1_in_isFrmMisAlignBuf | s1_in_isFinalSplit)
    | (|{s1_exception_new_vec_23,
         s1_exception_new_vec_15,
         s1_exception_new_vec_7,
         s1_exception_new_vec_6,
         ~(|_storeTrigger_tdataVec_io_toLoadStore_triggerAction)});
  assign io_lsq_replenish_uop_exceptionVec_3 = s2_in_uop_exceptionVec_3;
  assign io_lsq_replenish_uop_exceptionVec_6 = s2_exception_new_vec_6;
  assign io_lsq_replenish_uop_exceptionVec_15 = s2_in_uop_exceptionVec_15;
  assign io_lsq_replenish_uop_exceptionVec_23 = s2_in_uop_exceptionVec_23;
  assign io_lsq_replenish_uop_uopIdx = s2_in_uop_uopIdx;
  assign io_lsq_replenish_uop_robIdx_flag = s2_in_uop_robIdx_flag;
  assign io_lsq_replenish_uop_robIdx_value = s2_in_uop_robIdx_value;
  assign io_lsq_replenish_fullva = s2_in_fullva;
  assign io_lsq_replenish_vaNeedExt = s2_in_vaNeedExt;
  assign io_lsq_replenish_gpaddr = s2_in_gpaddr;
  assign io_lsq_replenish_af = s2_out_af & s2_valid & ~s2_kill;
  assign io_lsq_replenish_mmio =
    (s2_mmio | (&(s2_in_uop_fuOpType[3:2])) & s2_in_uop_fuOpType[6:4] == 3'h0)
    & ~s2_exception;
  assign io_lsq_replenish_memBackTypeMM = ~io_pmp_mmio;
  assign io_lsq_replenish_atomic = s2_in_atomic | _s2_out_atomic_T & io_pmp_atomic;
  assign io_lsq_replenish_hasException =
    ((|_GEN_1) | s2_in_uop_trigger == 4'h1 | s2_out_af) & s2_valid & ~s2_kill;
  assign io_lsq_replenish_isHyper = s2_in_isHyper;
  assign io_lsq_replenish_isForVSnonLeafPTE = s2_in_isForVSnonLeafPTE;
  assign io_lsq_replenish_isvec = s2_in_isvec | s2_frm_mab_vec;
  assign io_lsq_replenish_updateAddrValid =
    ~s2_mis_align & (~s2_in_isFrmMisAlignBuf | s2_in_isFinalSplit) | s2_exception;
  assign io_feedback_slow_valid = io_feedback_slow_valid_last_REG;
  assign io_feedback_slow_bits_robIdx_flag = io_feedback_slow_bits_r_robIdx_flag;
  assign io_feedback_slow_bits_robIdx_value = io_feedback_slow_bits_r_robIdx_value;
  assign io_feedback_slow_bits_hit = io_feedback_slow_bits_hit_r & ~misalignBufferNack;
  assign io_feedback_slow_bits_flushState = io_feedback_slow_bits_r_flushState;
  assign io_feedback_slow_bits_sqIdx_flag = io_feedback_slow_bits_r_sqIdx_flag;
  assign io_feedback_slow_bits_sqIdx_value = io_feedback_slow_bits_r_sqIdx_value;
  assign io_feedback_slow_bits_lqIdx_flag = io_feedback_slow_bits_r_lqIdx_flag;
  assign io_feedback_slow_bits_lqIdx_value = io_feedback_slow_bits_r_lqIdx_value;
  assign io_stld_nuke_query_valid = s1_valid & ~s1_tlb_miss;
  assign io_stld_nuke_query_bits_robIdx_flag = s1_in_uop_robIdx_flag;
  assign io_stld_nuke_query_bits_robIdx_value = s1_in_uop_robIdx_value;
  assign io_stld_nuke_query_bits_paddr = io_tlb_resp_bits_paddr_0;
  assign io_stld_nuke_query_bits_mask = s1_in_mask;
  assign io_stld_nuke_query_bits_matchLine =
    (s1_in_isvec | s1_in_misalignWith16Byte) & s1_in_is128bit;
  assign io_stout_valid = sx_valid_1_r & ~sx_in_vec_1_r;
  assign io_stout_bits_uop_exceptionVec_3 = sx_in_1_r_output_uop_exceptionVec_3;
  assign io_stout_bits_uop_exceptionVec_6 = sx_in_1_r_output_uop_exceptionVec_6;
  assign io_stout_bits_uop_exceptionVec_7 = sx_in_1_r_output_uop_exceptionVec_7;
  assign io_stout_bits_uop_exceptionVec_15 = sx_in_1_r_output_uop_exceptionVec_15;
  assign io_stout_bits_uop_exceptionVec_23 = sx_in_1_r_output_uop_exceptionVec_23;
  assign io_stout_bits_uop_trigger = sx_in_1_r_output_uop_trigger;
  assign io_stout_bits_uop_rfWen = sx_in_1_r_output_uop_rfWen;
  assign io_stout_bits_uop_pdest = sx_in_1_r_output_uop_pdest;
  assign io_stout_bits_uop_robIdx_flag = sx_in_1_r_output_uop_robIdx_flag;
  assign io_stout_bits_uop_robIdx_value = sx_in_1_r_output_uop_robIdx_value;
  assign io_stout_bits_uop_debugInfo_eliminatedMove =
    sx_in_1_r_output_uop_debugInfo_eliminatedMove;
  assign io_stout_bits_uop_debugInfo_renameTime =
    sx_in_1_r_output_uop_debugInfo_renameTime;
  assign io_stout_bits_uop_debugInfo_dispatchTime =
    sx_in_1_r_output_uop_debugInfo_dispatchTime;
  assign io_stout_bits_uop_debugInfo_enqRsTime = sx_in_1_r_output_uop_debugInfo_enqRsTime;
  assign io_stout_bits_uop_debugInfo_selectTime =
    sx_in_1_r_output_uop_debugInfo_selectTime;
  assign io_stout_bits_uop_debugInfo_issueTime = sx_in_1_r_output_uop_debugInfo_issueTime;
  assign io_stout_bits_uop_debugInfo_writebackTime =
    sx_in_1_r_output_uop_debugInfo_writebackTime;
  assign io_stout_bits_uop_debugInfo_runahead_checkpoint_id =
    sx_in_1_r_output_uop_debugInfo_runahead_checkpoint_id;
  assign io_stout_bits_uop_debugInfo_tlbFirstReqTime =
    sx_in_1_r_output_uop_debugInfo_tlbFirstReqTime;
  assign io_stout_bits_uop_debugInfo_tlbRespTime =
    sx_in_1_r_output_uop_debugInfo_tlbRespTime;
  assign io_stout_bits_uop_sqIdx_flag = sx_in_1_r_output_uop_sqIdx_flag;
  assign io_stout_bits_uop_sqIdx_value = sx_in_1_r_output_uop_sqIdx_value;
  assign io_stout_bits_debug_isMMIO = sx_in_1_r_output_debug_isMMIO;
  assign io_stout_bits_debug_isNC = sx_in_1_r_output_debug_isNC;
  assign io_stout_bits_debug_paddr = sx_in_1_r_output_debug_paddr;
  assign io_stout_bits_debug_vaddr = sx_in_1_r_output_debug_vaddr;
  assign io_vecstout_valid = sx_valid_1_r & sx_in_vec_1_r;
  assign io_vecstout_bits_mBIndex = sx_in_1_r_mbIndex;
  assign io_vecstout_bits_hit = sx_in_1_r_vecFeedback;
  assign io_vecstout_bits_trigger = sx_in_1_r_output_uop_trigger;
  assign io_vecstout_bits_exceptionVec_3 = sx_in_1_r_output_uop_exceptionVec_3;
  assign io_vecstout_bits_exceptionVec_6 = sx_in_1_r_output_uop_exceptionVec_6;
  assign io_vecstout_bits_exceptionVec_7 = sx_in_1_r_output_uop_exceptionVec_7;
  assign io_vecstout_bits_exceptionVec_15 = sx_in_1_r_output_uop_exceptionVec_15;
  assign io_vecstout_bits_exceptionVec_23 = sx_in_1_r_output_uop_exceptionVec_23;
  assign io_vecstout_bits_hasException = sx_in_1_r_hasException;
  assign io_vecstout_bits_vaddr = sx_in_1_r_vaddr;
  assign io_vecstout_bits_vaNeedExt = sx_in_1_r_vaNeedExt;
  assign io_vecstout_bits_gpaddr = {14'h0, sx_in_1_r_gpaddr};
  assign io_vecstout_bits_isForVSnonLeafPTE = sx_in_1_r_isForVSnonLeafPTE;
  assign io_vecstout_bits_vstart = sx_in_1_r_output_uop_vpu_vstart;
  assign io_vecstout_bits_elemIdx = sx_in_1_r_elemIdx;
  assign io_vecstout_bits_mask = sx_in_1_r_mask;
  assign io_st_mask_out_valid = io_st_mask_out_valid_0;
  assign io_st_mask_out_bits_sqIdx_value = s0_uop_sqIdx_value;
  assign io_st_mask_out_bits_mask = _s0_out_mask_T_14;
  assign io_vecstin_ready = s0_out_isvec;
  assign io_misalign_buf_valid = toMisalignBufferValid;
  assign io_misalign_buf_bits_uop_exceptionVec_0 = s2_in_uop_exceptionVec_0;
  assign io_misalign_buf_bits_uop_exceptionVec_1 = s2_in_uop_exceptionVec_1;
  assign io_misalign_buf_bits_uop_exceptionVec_2 = s2_in_uop_exceptionVec_2;
  assign io_misalign_buf_bits_uop_exceptionVec_4 = s2_in_uop_exceptionVec_4;
  assign io_misalign_buf_bits_uop_exceptionVec_5 = s2_in_uop_exceptionVec_5;
  assign io_misalign_buf_bits_uop_exceptionVec_8 = s2_in_uop_exceptionVec_8;
  assign io_misalign_buf_bits_uop_exceptionVec_9 = s2_in_uop_exceptionVec_9;
  assign io_misalign_buf_bits_uop_exceptionVec_10 = s2_in_uop_exceptionVec_10;
  assign io_misalign_buf_bits_uop_exceptionVec_11 = s2_in_uop_exceptionVec_11;
  assign io_misalign_buf_bits_uop_exceptionVec_12 = s2_in_uop_exceptionVec_12;
  assign io_misalign_buf_bits_uop_exceptionVec_13 = s2_in_uop_exceptionVec_13;
  assign io_misalign_buf_bits_uop_exceptionVec_14 = s2_in_uop_exceptionVec_14;
  assign io_misalign_buf_bits_uop_exceptionVec_16 = s2_in_uop_exceptionVec_16;
  assign io_misalign_buf_bits_uop_exceptionVec_17 = s2_in_uop_exceptionVec_17;
  assign io_misalign_buf_bits_uop_exceptionVec_18 = s2_in_uop_exceptionVec_18;
  assign io_misalign_buf_bits_uop_exceptionVec_19 = s2_in_uop_exceptionVec_19;
  assign io_misalign_buf_bits_uop_exceptionVec_20 = s2_in_uop_exceptionVec_20;
  assign io_misalign_buf_bits_uop_exceptionVec_21 = s2_in_uop_exceptionVec_21;
  assign io_misalign_buf_bits_uop_exceptionVec_22 = s2_in_uop_exceptionVec_22;
  assign io_misalign_buf_bits_uop_trigger = s2_in_uop_trigger;
  assign io_misalign_buf_bits_uop_ftqPtr_flag = s2_in_uop_ftqPtr_flag;
  assign io_misalign_buf_bits_uop_ftqPtr_value = s2_in_uop_ftqPtr_value;
  assign io_misalign_buf_bits_uop_ftqOffset = s2_in_uop_ftqOffset;
  assign io_misalign_buf_bits_uop_fuType = s2_in_uop_fuType;
  assign io_misalign_buf_bits_uop_fuOpType = s2_in_uop_fuOpType;
  assign io_misalign_buf_bits_uop_rfWen = s2_in_uop_rfWen;
  assign io_misalign_buf_bits_uop_vpu_vstart = s2_in_uop_vpu_vstart;
  assign io_misalign_buf_bits_uop_vpu_nf = s2_in_uop_vpu_nf;
  assign io_misalign_buf_bits_uop_vpu_veew = s2_in_uop_vpu_veew;
  assign io_misalign_buf_bits_uop_uopIdx = s2_in_uop_uopIdx;
  assign io_misalign_buf_bits_uop_pdest = s2_in_uop_pdest;
  assign io_misalign_buf_bits_uop_robIdx_flag = s2_in_uop_robIdx_flag;
  assign io_misalign_buf_bits_uop_robIdx_value = s2_in_uop_robIdx_value;
  assign io_misalign_buf_bits_uop_debugInfo_eliminatedMove =
    s2_in_uop_debugInfo_eliminatedMove;
  assign io_misalign_buf_bits_uop_debugInfo_renameTime = s2_in_uop_debugInfo_renameTime;
  assign io_misalign_buf_bits_uop_debugInfo_dispatchTime =
    s2_in_uop_debugInfo_dispatchTime;
  assign io_misalign_buf_bits_uop_debugInfo_enqRsTime = s2_in_uop_debugInfo_enqRsTime;
  assign io_misalign_buf_bits_uop_debugInfo_selectTime = s2_in_uop_debugInfo_selectTime;
  assign io_misalign_buf_bits_uop_debugInfo_issueTime = s2_in_uop_debugInfo_issueTime;
  assign io_misalign_buf_bits_uop_debugInfo_writebackTime =
    s2_in_uop_debugInfo_writebackTime;
  assign io_misalign_buf_bits_uop_debugInfo_runahead_checkpoint_id =
    s2_in_uop_debugInfo_runahead_checkpoint_id;
  assign io_misalign_buf_bits_uop_debugInfo_tlbFirstReqTime =
    s2_in_uop_debugInfo_tlbFirstReqTime;
  assign io_misalign_buf_bits_uop_debugInfo_tlbRespTime = s2_in_uop_debugInfo_tlbRespTime;
  assign io_misalign_buf_bits_uop_lqIdx_flag = s2_in_uop_lqIdx_flag;
  assign io_misalign_buf_bits_uop_lqIdx_value = s2_in_uop_lqIdx_value;
  assign io_misalign_buf_bits_uop_sqIdx_flag = s2_in_uop_sqIdx_flag;
  assign io_misalign_buf_bits_uop_sqIdx_value = s2_in_uop_sqIdx_value;
  assign io_misalign_buf_bits_vaddr = s2_in_vaddr;
  assign io_misalign_buf_bits_vaNeedExt = s2_in_vaNeedExt;
  assign io_misalign_buf_bits_paddr = s2_in_paddr;
  assign io_misalign_buf_bits_gpaddr = s2_in_gpaddr;
  assign io_misalign_buf_bits_mask = s2_in_mask;
  assign io_misalign_buf_bits_hasException = s2_exception;
  assign io_misalign_buf_bits_isForVSnonLeafPTE = s2_in_isForVSnonLeafPTE;
  assign io_misalign_buf_bits_isvec = s2_in_isvec;
  assign io_misalign_buf_bits_elemIdx = s2_in_elemIdx;
  assign io_misalign_buf_bits_alignedType = s2_in_alignedType;
  assign io_misalign_buf_bits_mbIndex = s2_in_mbIndex;
  assign io_s0_s1_valid = s0_valid_probe | s1_valid;
endmodule

